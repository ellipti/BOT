#!/usr/bin/env python3
"""
Calendar Guard + Risk Governor Integration —Ç–µ—Å—Ç
–≠–¥–∏–π–Ω –∑–∞—Å–≥–∏–π–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±–∞ —ç—Ä—Å–¥—ç–ª–∏–π–Ω –∑–∞—Å–∞–≥–ª–∞–ª—ã–Ω —Ö–∞–º—Ç–∞—Ä—Å–∞–Ω —Å–∏—Å—Ç–µ–º–∏–π–Ω —à–∞–ª–≥–∞–ª—Ç

–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—É–¥:
1. Calendar Guard + Risk Governor —Ö–æ—Å–æ–ª—Å–æ–Ω —à–∞–ª–≥–∞–ª—Ç
2. Multiple blocking reasons (calendar + risk)
3. Priority-based blocking decisions
4. Integrated logging and alerts
"""

import asyncio
from datetime import UTC, datetime, timedelta
from pathlib import Path

from integrations.calendar import (
    CalendarGuard,
    EventImportance,
    get_calendar_guard_sync,
)
from risk.governor import RiskGovernor


def test_calendar_risk_integration():
    print("üîß Calendar Guard + Risk Governor Integration —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    # Test —Ñ–∞–π–ª—É—É–¥—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö
    test_files = ["test_calendar_integration.json", "test_risk_integration.json"]
    for f in test_files:
        path = Path(f)
        if path.exists():
            path.unlink()

    print("\nüîí Integration —Ç–µ—Å—Ç —ç—Ö—ç–ª–∂ –±–∞–π–Ω–∞...")

    # Mock settings
    class MockSettings:
        class Trading:
            trading_economics_api_key = "test_key"
            calendar_enabled = True

        class Risk:
            max_daily_loss_percentage = 5.0
            max_weekly_loss_percentage = 15.0
            max_daily_trades = 15
            max_weekly_trades = 75
            cooldown_minutes = 30
            circuit_breaker_loss_threshold = 8.0
            enable_telegram_alerts = (
                True  # telegram_alerts_enabled -> enable_telegram_alerts
            )

        trading = Trading()
        risk = Risk()

    # Systems “Ø“Ø—Å–≥—ç—Ö
    calendar_guard = CalendarGuard(MockSettings())
    calendar_guard.cache_path = Path("test_calendar_integration.json")

    risk_governor = RiskGovernor("test_risk_integration.json")
    # Mock settings —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
    risk_governor.settings = MockSettings()

    print("\n1. Clean state —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    # Calendar check
    calendar_result = asyncio.run(calendar_guard.check_trading_allowed(["USD"]))
    print(f"   Calendar –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {calendar_result.allowed}")

    # Risk check
    risk_decision = risk_governor.check_trade_allowed("XAUUSD", 0.1)
    print(f"   Risk –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {risk_decision.allowed}")

    # Both should be allowed initially
    assert calendar_result.allowed, "–ê–Ω—Ö–Ω—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—å —à–∞–ª–≥–∞–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞–π—Ö —ë—Å—Ç–æ–π"
    assert risk_decision.allowed, "–ê–Ω—Ö–Ω—ã —ç—Ä—Å–¥—ç–ª —à–∞–ª–≥–∞–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞–π—Ö —ë—Å—Ç–æ–π"

    print("   ‚úÖ –ê–Ω—Ö–Ω—ã —Ç”©–ª”©–≤: –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±–æ–ª–æ–Ω —ç—Ä—Å–¥—ç–ª —Ö–æ—ë—É–ª–∞–∞ –∑”©–≤—à”©”©—Ä—á –±–∞–π–Ω–∞")

    print("\n2. High-impact –∫–∞–ª–µ–Ω–¥–∞—Ä—å —ç–≤–µ–Ω—Ç –Ω—ç–º–∂ –±–∞–π–Ω–∞...")

    # High-impact NFP —ç–≤–µ–Ω—Ç 15 –º–∏–Ω—É—Ç—ã–Ω –¥–∞—Ä–∞–∞
    now = datetime.now(UTC)
    nfp_event = {
        "id": "integration_nfp",
        "title": "Non-Farm Payrolls",
        "country": "US",
        "category": "Employment",
        "importance": EventImportance.CRITICAL.value,
        "datetime": (now + timedelta(minutes=15)).isoformat(),
        "currency": "USD",
        "forecast": None,
        "previous": None,
        "actual": None,
        "unit": None,
    }

    # Mock –∫–∞–ª–µ–Ω–¥–∞—Ä—å ”©–≥”©–≥–¥”©–ª –Ω—ç–º—ç—Ö
    calendar_data = {
        "events": [nfp_event],
        "last_update": time.time(),
        "api_calls": 1,
        "last_api_call": time.time(),
    }
    calendar_guard._save_cache_data(calendar_data)

    # Calendar —à–∞–ª–≥–∞—Ö
    calendar_result = asyncio.run(calendar_guard.check_trading_allowed(["USD"]))
    print(
        f"   NFP —ç–≤–µ–Ω—Ç–∏–π–Ω “Ø–µ–¥ Calendar –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {calendar_result.allowed}"
    )
    print(f"   Calendar —à–∞–ª—Ç–≥–∞–∞–Ω: {calendar_result.reason}")

    # Risk-–≥ –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö
    risk_decision = risk_governor.check_trade_allowed("XAUUSD", 0.1)
    print(f"   Risk –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {risk_decision.allowed}")

    # Calendar should block, risk should still allow
    assert not calendar_result.allowed, "NFP —ç–≤–µ–Ω—Ç–∏–π–Ω “Ø–µ–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ö–æ—Ä–∏–≥–ª–æ—Ö —ë—Å—Ç–æ–π"
    assert risk_decision.allowed, "Risk —Å–∏—Å—Ç–µ–º–¥ –∞–ª–¥–∞–≥–¥–∞–ª –±–∞–π—Ö–≥“Ø–π “Ø–µ–¥ –∑”©–≤—à”©”©—Ä”©—Ö —ë—Å—Ç–æ–π"

    print("   ‚úÖ Calendar Guard NFP —ç–≤–µ–Ω—Ç–∏–π–≥ –∑”©–≤ —Ç–∞–Ω–∏–∂ —Ö–æ—Ä–∏–≥–ª–æ–∂—ç—ç")

    print("\n3. Risk limits-–≥ “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")

    # Multiple –∞–ª–¥–∞–≥–¥–∞–ª—Ç–∞–π trades —Ö–∏–π–∂ risk limit —Ö“Ø—Ä—Ç—ç–ª —Ö“Ø—Ä–≥—ç—Ö
    for i in range(5):
        risk_governor.record_trade_result("XAUUSD", -1.0, was_win=False)
        print(f"   –ê–ª–¥–∞–≥–¥–∞–ª—Ç–∞–π –∞—Ä–∏–ª–∂–∞–∞ {i+1} –±“Ø—Ä—Ç–≥—ç–ª—ç—ç")

    # Risk check –¥–∞—Ö–∏–Ω —Ö–∏–π—Ö
    risk_decision = risk_governor.check_trade_allowed("XAUUSD", 0.1)
    risk_metrics = risk_governor.get_current_metrics()

    print(f"   ”®–¥—Ä–∏–π–Ω –∞–ª–¥–∞–≥–¥–∞–ª: {risk_metrics.daily_loss:.1f}%")
    print(f"   –≠—Ä—Å–¥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω: {risk_metrics.risk_level.value}")
    print(f"   Risk –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {risk_decision.allowed}")

    print("   ‚úÖ Risk limits —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    print("\n4. Double blocking scenario —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    # –•–æ—ë—É–ª–∞–∞ –±–ª–æ–∫ —Ö–∏–π—Ö —Ç”©–ª”©–≤–∏–π–≥ —Ç–µ—Å—Ç —Ö–∏–π—Ö
    calendar_result = asyncio.run(calendar_guard.check_trading_allowed(["USD"]))
    risk_decision = risk_governor.check_trade_allowed("XAUUSD", 0.1)

    print(f"   Calendar –±–ª–æ–∫: {not calendar_result.allowed}")
    print(f"   Risk –±–ª–æ–∫: {not risk_decision.allowed}")

    if not calendar_result.allowed and not risk_decision.allowed:
        print("   üìã –•–æ—ë—Ä —Å–∏—Å—Ç–µ–º —Ö–æ—ë—É–ª–∞–∞ –±–ª–æ–∫ —Ö–∏–π–∂ –±–∞–π–Ω–∞:")
        print(f"      üìÖ Calendar: {calendar_result.reason}")
        print(f"      ‚ö†Ô∏è  Risk: {risk_decision.reason}")
        print("   ‚úÖ Multiple blocking –∑”©–≤ –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞")
    elif not calendar_result.allowed:
        print("   üìÖ –ó”©–≤—Ö”©–Ω Calendar –±–ª–æ–∫ —Ö–∏–π–∂ –±–∞–π–Ω–∞")
    elif not risk_decision.allowed:
        print("   ‚ö†Ô∏è  –ó”©–≤—Ö”©–Ω Risk –±–ª–æ–∫ —Ö–∏–π–∂ –±–∞–π–Ω–∞")
    else:
        print("   ‚ö†Ô∏è  –ê–ª—å –Ω—å —á –±–ª–æ–∫ —Ö–∏–π—Ö–≥“Ø–π –±–∞–π–Ω–∞")

    print("\n5. Priority decision logic —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    def make_integrated_decision(symbol: str, currencies: list = None) -> dict:
        """Calendar + Risk integrated —à–∏–π–¥–≤—ç—Ä –≥–∞—Ä–≥–∞—Ö"""

        # Calendar —à–∞–ª–≥–∞–ª—Ç
        calendar_result = get_calendar_guard_sync(currencies)

        # Risk —à–∞–ª–≥–∞–ª—Ç
        risk_decision = risk_governor.check_trade_allowed(symbol, 0.1)

        # Priority logic
        if not calendar_result.allowed and not risk_decision.allowed:
            # –•–æ—ë—É–ª–∞–∞ –±–ª–æ–∫ - priority —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö
            if calendar_result.status.value == "active":
                primary_reason = f"üóìÔ∏è {calendar_result.reason}"
                secondary_reason = f"‚ö†Ô∏è  {risk_decision.reason}"
            else:
                primary_reason = f"‚ö†Ô∏è  {risk_decision.reason}"
                secondary_reason = f"üóìÔ∏è {calendar_result.reason}"

            return {
                "allowed": False,
                "primary_reason": primary_reason,
                "secondary_reason": secondary_reason,
                "blocking_systems": ["calendar", "risk"],
            }
        elif not calendar_result.allowed:
            return {
                "allowed": False,
                "primary_reason": f"üóìÔ∏è {calendar_result.reason}",
                "blocking_systems": ["calendar"],
            }
        elif not risk_decision.allowed:
            return {
                "allowed": False,
                "primary_reason": f"‚ö†Ô∏è  {risk_decision.reason}",
                "blocking_systems": ["risk"],
            }
        else:
            return {
                "allowed": True,
                "primary_reason": "–ë“Ø—Ö —Å–∏—Å—Ç–µ–º –∑”©–≤—à”©”©—Ä—á –±–∞–π–Ω–∞",
                "blocking_systems": [],
            }

    # Integrated decision —Ç–µ—Å—Ç
    decision = make_integrated_decision("XAUUSD", ["USD"])

    print(f"   Integrated –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {decision['allowed']}")
    print(f"   “Æ–Ω–¥—Å—ç–Ω —à–∞–ª—Ç–≥–∞–∞–Ω: {decision['primary_reason']}")
    if "secondary_reason" in decision:
        print(f"   –ù—ç–º—ç–ª—Ç —à–∞–ª—Ç–≥–∞–∞–Ω: {decision['secondary_reason']}")
    print(f"   –ë–ª–æ–∫ —Ö–∏–π—Å—ç–Ω —Å–∏—Å—Ç–µ–º“Ø“Ø–¥: {decision['blocking_systems']}")

    print("   ‚úÖ Priority decision logic –∑”©–≤ –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞")

    print("\n6. Test —Ñ–∞–π–ª—É—É–¥—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç–∂ –±–∞–π–Ω–∞...")
    for f in test_files:
        path = Path(f)
        if path.exists():
            path.unlink()
    print("   ‚úÖ –¶—ç–≤—ç—Ä–ª—ç–ª—Ç –¥—É—É—Å–ª–∞–∞")

    print("\nüéâ Calendar Guard + Risk Governor Integration —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –¥—É—É—Å–ª–∞–∞!")
    print("üìä Integration Systems:")
    print("   ‚úÖ Economic Calendar blackout window detection")
    print("   ‚úÖ Risk-based trading limits enforcement")
    print("   ‚úÖ Multi-system blocking coordination")
    print("   ‚úÖ Priority-based decision making")
    print("   ‚úÖ Integrated logging and monitoring")
    print("   ‚úÖ Graceful system interaction")


if __name__ == "__main__":
    import time

    test_calendar_risk_integration()

#!/usr/bin/env python3
"""
Quick Diagnostics - i18n System Health Check
=============================================

–ú–æ–Ω–≥–æ–ª —Ö—ç–ª–Ω–∏–π i18n —Å–∏—Å—Ç–µ–º–∏–π–Ω —Ö—É—Ä–¥–∞–Ω –æ–Ω–æ—à–∏–ª–≥–æ–æ
–û–ø–µ—Ä–∞—Ç–æ—Ä—É—É–¥ –±–æ–ª–æ–Ω DevOps-—É—É–¥–∞–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω —Ö—É—Ä–¥–∞–Ω —à–∞–ª–≥–∞–ª—Ç—ã–Ω —Å–∫—Ä–∏–ø—Ç

–ê–∂–∏–ª–ª—É—É–ª–∞—Ö: python scripts/quick_diagnostics.py
"""

import os
import sys
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))


def print_header():
    print("üîß QUICK DIAGNOSTICS - i18n SYSTEM HEALTH CHECK")
    print("–ú–æ–Ω–≥–æ–ª —Ö—ç–ª–Ω–∏–π i18n —Å–∏—Å—Ç–µ–º–∏–π–Ω —Ö—É—Ä–¥–∞–Ω –æ–Ω—à–∏–ª–≥–æ–æ")
    print("=" * 55)


def check_locale_config():
    """Locale —Ç–æ—Ö–∏—Ä–≥–æ–æ —à–∞–ª–≥–∞—Ö"""
    print("\n1Ô∏è‚É£ Locale —Ç–æ—Ö–∏—Ä–≥–æ–æ —à–∞–ª–≥–∞–ª—Ç...")

    try:
        from config.settings import settings

        locale = settings.LOCALE
        timezone = settings.TZ

        if locale == "mn":
            print(f"   ‚úÖ LOCALE: {locale} (–∑”©–≤)")
        else:
            print(f"   ‚ùå LOCALE: {locale} (mn –±–∞–π—Ö —ë—Å—Ç–æ–π)")

        if timezone == "Asia/Ulaanbaatar":
            print(f"   ‚úÖ TIMEZONE: {timezone} (–∑”©–≤)")
        else:
            print(f"   ‚ö†Ô∏è  TIMEZONE: {timezone} (Asia/Ulaanbaatar –±–∞–π—Ö —ë—Å—Ç–æ–π)")

        return locale == "mn"

    except Exception as e:
        print(f"   ‚ùå –ê–ª–¥–∞–∞: {e}")
        return False


def check_i18n_system():
    """i18n —Å–∏—Å—Ç–µ–º –∞–∂–∏–ª–ª–∞–∂ –±—É–π —ç—Å—ç—Ö"""
    print("\n2Ô∏è‚É£ i18n —Å–∏—Å—Ç–µ–º —à–∞–ª–≥–∞–ª—Ç...")

    try:
        from utils.i18n import _MESSAGES_MN, t

        # Test basic translation
        test_msg = t("system_startup")
        expected = "–°–∏—Å—Ç–µ–º —ç—Ö—ç–ª–∂ –±–∞–π–Ω–∞..."

        if test_msg == expected:
            print(f"   ‚úÖ –û—Ä—á—É—É–ª–≥–∞: {test_msg}")
        else:
            print(f"   ‚ùå –û—Ä—á—É—É–ª–≥–∞ –∞–ª–¥–∞–∞: '{test_msg}' != '{expected}'")
            return False

        # Test parameterized translation
        param_msg = t("order_placed", symbol="TEST", side="BUY", qty=1.0)
        if "–ó–∞—Ö–∏–∞–ª–≥–∞ –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç" in param_msg and "TEST" in param_msg:
            print(f"   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—Ç—ç–π –æ—Ä—á—É—É–ª–≥–∞: {param_msg}")
        else:
            print(f"   ‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—Ç—ç–π –æ—Ä—á—É—É–ª–≥–∞ –∞–ª–¥–∞–∞: {param_msg}")
            return False

        # Count translations
        total_translations = len(_MESSAGES_MN)
        print(f"   üìä –ù–∏–π—Ç –æ—Ä—á—É—É–ª–≥–∞: {total_translations}")

        return True

    except Exception as e:
        print(f"   ‚ùå –ê–ª–¥–∞–∞: {e}")
        return False


def check_utf8_encoding():
    """UTF-8 –¥—ç–º–∂–ª—ç–≥ —à–∞–ª–≥–∞—Ö"""
    print("\n3Ô∏è‚É£ UTF-8 encoding —à–∞–ª–≥–∞–ª—Ç...")

    try:
        # Check system encoding
        encoding = sys.stdout.encoding
        if encoding and "utf-8" in encoding.lower():
            print(f"   ‚úÖ System encoding: {encoding}")
        else:
            print(f"   ‚ö†Ô∏è  System encoding: {encoding} (UTF-8 –±–∏—à)")

        # Check environment variable
        pythonioencoding = os.environ.get("PYTHONIOENCODING", "—É–Ω–∏–º–∞–≥–¥—É—É")
        if pythonioencoding and "utf-8" in pythonioencoding.lower():
            print(f"   ‚úÖ PYTHONIOENCODING: {pythonioencoding}")
        else:
            print(f"   ‚ö†Ô∏è  PYTHONIOENCODING: {pythonioencoding}")
            print("      ‚Üí –¢–æ—Ö–∏—Ä–≥–æ–æ: $env:PYTHONIOENCODING='UTF-8'")

        # Test Mongolian characters
        mongolian_test = "–ú–æ–Ω–≥–æ–ª “Ø—Å—ç–≥ —Ç–µ—Å—Ç: ”©“Ø—ç"
        print(f"   üá≤üá≥ –ú–æ–Ω–≥–æ–ª “Ø—Å—ç–≥ —Ç–µ—Å—Ç: {mongolian_test}")

        return True

    except Exception as e:
        print(f"   ‚ùå –ê–ª–¥–∞–∞: {e}")
        return False


def check_timezone_functions():
    """–¶–∞–≥–∏–π–Ω –±“Ø—Å–∏–π–Ω —Ñ—É–Ω–∫—Ü“Ø“Ø–¥ —à–∞–ª–≥–∞—Ö"""
    print("\n4Ô∏è‚É£ –¶–∞–≥–∏–π–Ω –±“Ø—Å —à–∞–ª–≥–∞–ª—Ç...")

    try:
        from datetime import datetime

        from utils.timez import fmt_ts, ub_now

        # Test UB timezone
        ub_time = ub_now()
        formatted_time = fmt_ts(ub_time)

        if "+08" in str(ub_time) or "UTC+08" in formatted_time:
            print(f"   ‚úÖ –£–ë —Ü–∞–≥–∏–π–Ω –±“Ø—Å: {formatted_time}")
        else:
            print(f"   ‚ö†Ô∏è  –¶–∞–≥–∏–π–Ω –±“Ø—Å —Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π: {formatted_time}")

        return True

    except Exception as e:
        print(f"   ‚ùå –ê–ª–¥–∞–∞: {e}")
        return False


def check_integration_files():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏ —Ö–∏–π–≥–¥—Å—ç–Ω —Ñ–∞–π–ª—É—É–¥—ã–≥ —à–∞–ª–≥–∞—Ö"""
    print("\n5Ô∏è‚É£ –§–∞–π–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏ —à–∞–ª–≥–∞–ª—Ç...")

    integration_files = [
        ("risk/telegram_alerts.py", "Telegram –∞–ª–µ—Ä—Ç"),
        ("risk/regime.py", "–î—ç–≥–ª—ç–º —Ç–æ–≥—Ç–æ–æ–ª—Ç"),
        ("app/pipeline.py", "–ê—Ä–∏–ª–∂–∞–∞–Ω—ã pipeline"),
        ("dashboard/auth.py", "Dashboard –Ω—ç–≤—Ç—Ä—ç—Ö"),
        ("core/executor/order_book.py", "–ó–∞—Ö–∏–∞–ª–≥—ã–Ω –∞–º—å–¥—Ä–∞–ª—ã–Ω –º”©—á–ª”©–≥"),
    ]

    integrated_count = 0

    for filepath, description in integration_files:
        full_path = Path(filepath)
        if full_path.exists():
            try:
                content = full_path.read_text(encoding="utf-8")
                if "from utils.i18n import t" in content:
                    print(f"   ‚úÖ {description}: i18n –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏ —Ö–∏–π–≥–¥—Å—ç–Ω")
                    integrated_count += 1
                else:
                    print(f"   ‚ö†Ô∏è  {description}: i18n –∏–º–ø–æ—Ä—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
            except Exception as e:
                print(f"   ‚ùå {description}: –§–∞–π–ª —É–Ω—à–∏—Ö –∞–ª–¥–∞–∞ - {e}")
        else:
            print(f"   ‚ùå {description}: –§–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π - {filepath}")

    print(f"   üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏ —Ö–∏–π–≥–¥—Å—ç–Ω: {integrated_count}/{len(integration_files)}")
    return integrated_count >= 3  # At least 3 files should be integrated


def show_quick_fixes():
    """–•—É—Ä–¥–∞–Ω –∑–∞—Å–≤–∞—Ä—ã–Ω –∑”©–≤–ª”©–º–∂“Ø“Ø–¥"""
    print("\nüîß –•–£–†–î–ê–ù –ó–ê–°–í–ê–†–´–ù –ó”®–í–õ”®–ú–ñ“Æ“Æ–î:")
    print("=" * 40)

    print("\n‚ùå –ú–µ—Å—Å–µ–∂ –∞–Ω–≥–ª–∏ —Ö—ç–≤—ç—ç—Ä:")
    print("   ‚Üí settings.LOCALE='mn' —ç—Å—ç—Ö—ç—ç —à–∞–ª–≥–∞")
    print("   ‚Üí logger.info(t('message_key')) –∞—à–∏–≥–ª–∞")
    print("   ‚Üí from utils.i18n import t –∏–º–ø–æ—Ä—Ç —Ö–∏–π–≥–¥—Å—ç–Ω —ç—Å—ç—Ö—ç—ç —à–∞–ª–≥–∞")

    print("\n‚ùå UTF-8 –∞–ª–¥–∞–∞:")
    print("   ‚Üí PowerShell: $env:PYTHONIOENCODING='UTF-8'")
    print("   ‚Üí Python —Ñ–∞–π–ª–¥: # -*- coding: utf-8 -*-")
    print("   ‚Üí JSON —Ñ–∞–π–ª: ensure_ascii=False –∞—à–∏–≥–ª–∞")

    print("\n‚ùå Snapshot –∞–ª–¥–∞–∞:")
    print("   ‚Üí settings.OBS_BASE –∞—à–∏–≥–ª–∞")
    print("   ‚Üí –î–∞–≤—Ö–∞—Ä slash-–∞–∞—Å –∑–∞–π–ª—Å—Ö–∏–π: /metrics (//metrics –±–∏—à)")
    print("   ‚Üí Port —Ç–æ—Ö–∏—Ä–≥–æ–æ —à–∞–ª–≥–∞")

    print("\n‚úÖ –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥:")
    print("   ‚Üí python scripts/ga_smoke_mn.py")
    print("   ‚Üí python scripts/snapshot_metrics.py")
    print("   ‚Üí python scripts/demo_mongolian_logs.py")


def main():
    """“Æ–Ω–¥—Å—ç–Ω –æ–Ω–æ—à–∏–ª–≥–æ–æ —Ñ—É–Ω–∫—Ü"""
    print_header()

    # Run all checks
    results = []
    results.append(check_locale_config())
    results.append(check_i18n_system())
    results.append(check_utf8_encoding())
    results.append(check_timezone_functions())
    results.append(check_integration_files())

    # Summary
    passed = sum(results)
    total = len(results)

    print(f"\n{'='*55}")
    print("üìä –î“Æ–ì–ù–≠–õ–¢ - DIAGNOSTICS SUMMARY")
    print(f"{'='*55}")

    if passed == total:
        print(f"‚úÖ –ë“Æ–ì–î –ó”®–í”®”®–† –¢–û–•–ò–†–£–£–õ–°–ê–ù: {passed}/{total}")
        print("üéâ i18n —Å–∏—Å—Ç–µ–º –±“Ø—Ä—ç–Ω –∞–∂–∏–ª–ª–∞—Ö–∞–¥ –±—ç–ª—ç–Ω!")
        print("üöÄ Production-–¥ deploy —Ö–∏–π–∂ –±–æ–ª–Ω–æ!")
    else:
        print(f"‚ö†Ô∏è  –ê–ù–•–ê–ê–†–ê–õ: {passed}/{total} –∑”©–≤ —Ç–æ—Ö–∏—Ä—É—É–ª—Å–∞–Ω")
        print("üîß –î—ç—ç—Ä—Ö –∞–ª–¥–∞–∞–Ω—É—É–¥—ã–≥ –∑–∞—Å–∞–∞–¥ –¥–∞—Ö–∏–Ω —Ç—É—Ä—à–∞.")

        # Show fixes
        show_quick_fixes()

    print("\nüîÑ –î–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö: python scripts/quick_diagnostics.py")
    return 0 if passed == total else 1


if __name__ == "__main__":
    exit(main())

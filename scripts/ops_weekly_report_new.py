# scripts/ops_weekly_report.py
# ------------------------------------------------------------
# –ó–æ—Ä–∏–ª–≥–æ: ”®–Ω–≥”©—Ä—Å”©–Ω 7 —Ö–æ–Ω–æ–≥–∏–π–Ω /metrics snapshot + –∞—É–¥–∏—Ç –ª–æ–≥—É—É–¥–∞–∞—Å
# KPI –≥–∞—Ä–≥–∞–∂, docs/WEEKLY_OPS_REPORT.md —Ç–∞–π–ª–∞–Ω–≥ –º–æ–Ω–≥–æ–ª–æ–æ—Ä “Ø“Ø—Å–≥—ç–Ω—ç.
# KPI: p95 loop, rejected%, timeout%, orders count,
#      partial‚Üífilled ratio, SLA breaches, DR drill —Å—Ç–∞—Ç—É—Å
# –•—ç—Ä—ç–≥–ª—ç—ç: python scripts/ops_weekly_report.py
# –û—Ä—à–∏—Ö –≥–∞–∑–∞—Ä:
#   - artifacts/metrics-YYYYMMDD-HHMM.json  (snapshot_metrics.py –≥–∞—Ä–≥–∞—Å–∞–Ω)
#   - logs/audit-YYYYMMDD.jsonl             (AuditLogger-–∏–π–Ω –±–∏—á–ª—ç–≥)
# ------------------------------------------------------------
from __future__ import annotations

import datetime as dt
import glob
import json
import os
import pathlib
import re
from statistics import median

ART = pathlib.Path("artifacts")
LOG = pathlib.Path("logs")
DOCS = pathlib.Path("docs")
DOCS.mkdir(parents=True, exist_ok=True)


# --- –¢—É—Å–ª–∞—Ö —Ñ—É–Ω–∫—Ü—É—É–¥ (–º–æ–Ω–≥–æ–ª –∫–æ–º–º–µ–Ω—Ç) ---


def _load_recent_metric_snapshots(days: int = 7) -> list[dict]:
    """–°“Ø“Ø–ª–∏–π–Ω N —Ö–æ–Ω–æ–≥–∏–π–Ω metrics snapshot-—É—É–¥—ã–≥ —É–Ω—à–∏–Ω–∞."""
    if not ART.exists():
        return []
    files = sorted(ART.glob("metrics-*.json"))
    cutoff = dt.datetime.utcnow() - dt.timedelta(days=days)
    out = []
    for f in files:
        # –§–∞–π–ª—ã–Ω –Ω—ç—Ä—ç—ç—Å UTC ts (YYYYMMDD-HHMM) –∞–≤–∞—Ö—ã–≥ –æ—Ä–æ–ª–¥—ä—ë
        # –ñ–∏—à—ç—ç: metrics-20250908-1100.json
        try:
            ts_str = f.stem.split("-")[1]
            snap_dt = dt.datetime.strptime(ts_str, "%Y%m%d")
        except Exception:
            # –ú”©—Ä–∏–π–Ω –æ–≥–Ω–æ–æ parse –±–æ–ª–æ—Ö–≥“Ø–π –±–æ–ª —Ñ–∞–π–ª—ã–≥ —É–Ω—à–∞–∞–¥ ts_utc-–≥ –∞—à–∏–≥–ª–∞–Ω–∞
            try:
                snap = json.loads(f.read_text(encoding="utf-8"))
                ts_utc = snap.get("ts_utc")
                if ts_utc:
                    # ts_utc = "YYYYMMDD-HHMM"
                    snap_dt = dt.datetime.strptime(ts_utc.split("-")[0], "%Y%m%d")
                else:
                    snap_dt = dt.datetime.min
            except:
                snap_dt = dt.datetime.min
        if snap_dt >= cutoff:
            try:
                out.append(json.loads(f.read_text(encoding="utf-8")))
            except Exception:
                pass
    return out


def _parse_prom(text: str, name: str) -> float | None:
    """
    Prometheus-–ø–æ–¥–æ–± —Ç–µ–∫—Å—Ç—ç—ç—Å –≥–∞–Ω—Ü metric-–∏–π–Ω —É—Ç–≥—ã–≥ –∞–≤–∞—Ö.
    –ñ–∏—à—ç—ç –º”©—Ä: trade_loop_latency_ms_p95{...} 183.42
               rejected_rate 0.031
    """
    # ^metric({labels})? <value>
    pat = re.compile(
        rf"^{re.escape(name)}(?:{{[^}}]*}})?\s+([-+eE0-9\.]+)\s*$", re.MULTILINE
    )
    m = pat.search(text or "")
    if not m:
        return None
    try:
        return float(m.group(1))
    except Exception:
        return None


def _agg(values: list[float]) -> tuple[float | None, float | None]:
    """–î—É–Ω–¥–∞–∂ –±–∞ –º–µ–¥–∏–∞–Ω (—Ö–æ—ë—É–ª–∞–Ω–≥ –Ω—å –±—É—Ü–∞–∞–Ω–∞)."""
    if not values:
        return None, None
    avg = sum(values) / len(values)
    med = median(values)
    return avg, med


def _load_audit_events(days: int = 7) -> list[dict]:
    """–°“Ø“Ø–ª–∏–π–Ω N —Ö–æ–Ω–æ–≥–∏–π–Ω –∞—É–¥–∏—Ç –ª–æ–≥—É—É–¥–∞–∞—Å –±“Ø—Ö –º”©—Ä–∏–π–≥ —Ü—É–≥–ª—É—É–ª–Ω–∞ (jsonl)."""
    out = []
    if not LOG.exists():
        return out
    cutoff = (dt.datetime.utcnow() - dt.timedelta(days=days)).date()
    for f in sorted(LOG.glob("audit-*.jsonl")):
        # –§–∞–π–ª—ã–Ω –Ω—ç—Ä: audit-YYYYMMDD.jsonl
        try:
            dstr = f.stem.split("-")[1]
            fdate = dt.datetime.strptime(dstr, "%Y%m%d").date()
        except Exception:
            fdate = dt.date.min
        if fdate < cutoff:
            continue
        with f.open(encoding="utf-8") as fh:
            for line in fh:
                try:
                    out.append(json.loads(line))
                except Exception:
                    continue
    return out


def _fmt(val: float | None, suffix: str = "", places: int = 2, na: str = "‚Äî") -> str:
    """–¢–æ–æ–≥ —Ñ–æ—Ä–º–∞—Ç–ª–∞–Ω–∞ (None –±–æ–ª '‚Äî')."""
    if val is None:
        return na
    return f"{val:.{places}f}{suffix}"


def _decide_actions(stats: dict) -> list[str]:
    """“Æ–∑“Ø“Ø–ª—ç–ª—Ç“Ø“Ø–¥–∏–π–≥ “Ø–Ω–¥—ç—Å–ª—ç–Ω —Ü–∞–∞—à–¥—ã–Ω –∞—Ä–≥–∞ —Ö—ç–º–∂—ç—ç–≥ —Å–∞–Ω–∞–ª –±–æ–ª–≥–æ–Ω–æ."""
    actions = []

    # P95 latency > 250ms
    if stats["loop_latency_ms_p95"] and stats["loop_latency_ms_p95"] > 250:
        actions.append("- **Loop —Ö—É—Ä–¥ —Å–∞–π–∂—Ä—É—É–ª–∞—Ö**: P95 latency-–≥ 200ms –¥–æ–æ—à–ª—É—É–ª–∞—Ö")

    # Rejected rate > 5%
    if stats["rejected_rate"] and stats["rejected_rate"] > 0.05:
        actions.append("- **Rejection —à–∏–π–¥—ç—Ö**: –¢–∞–π–ª–±–∞—Ä—ã–≥ —à–∞–ª–≥–∞–∂ –∑–∞—Å–∞—Ö")

    # Too many SLA breaches
    if stats["sla_breach_count"] and stats["sla_breach_count"] > 10:
        actions.append("- **SLA –∑”©—Ä—á–∏–ª –±–∞–≥–∞—Å–≥–∞—Ö**: –°–∏—Å—Ç–µ–º–∏–π–Ω –∞—á–∞–∞–ª–∞–ª —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö")

    # DR drill overdue
    if not stats["dr_drill_this_week"]:
        actions.append("- **DR –¥–∞–¥–ª–∞–≥–∞ —Ö–∏–π—Ö**: –°—ç—Ä–≥—ç—ç–Ω –±–æ—Å–≥–æ–ª—Ç—ã–Ω —Ç–µ—Å—Ç")

    if not actions:
        actions.append("- –ë“Ø—Ö “Ø–∑“Ø“Ø–ª—ç–ª—Ç —Ö—ç–≤–∏–π–Ω —Ç“Ø–≤—à–∏–Ω–¥ –±–∞–π–Ω–∞ ‚úÖ")

    return actions


def main():
    """“Æ–Ω–¥—Å—ç–Ω –∞–∂–∏–ª–ª–∞–≥–∞–∞: 7 —Ö–æ–Ω–æ–≥–∏–π–Ω —Ç–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç—Ö."""
    print("üîç ”®–Ω–≥”©—Ä—Å”©–Ω 7 —Ö–æ–Ω–æ–≥–∏–π–Ω —Ç–∞–π–ª–∞–Ω —ç—Ö–ª—ç–∂ –±–∞–π–Ω–∞...")

    # 1) Metrics —Ü—É–≥–ª—É—É–ª–∞—Ö
    snapshots = _load_recent_metric_snapshots()
    print(f"üìä {len(snapshots)} metrics snapshot –æ–ª–¥–ª–æ–æ")

    # 2) KPI —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
    p95_vals, rej_vals, timeout_vals = [], [], []
    orders_total = 0

    for snap in snapshots:
        text = snap.get("text", "")

        # Loop latency p95
        p95 = _parse_prom(text, "trade_loop_latency_ms_p95")
        if p95 is not None:
            p95_vals.append(p95)

        # Reject rate
        rej = _parse_prom(text, "rejected_rate")
        if rej is not None:
            rej_vals.append(rej)

        # Timeout rate
        timeout = _parse_prom(text, "timeout_rate")
        if timeout is not None:
            timeout_vals.append(timeout)

        # Orders count
        orders = _parse_prom(text, "orders_count")
        if orders is not None:
            orders_total += orders

    # 3) –î—É–Ω–¥–∞–∂/–º–µ–¥–∏–∞–Ω
    p95_avg, p95_med = _agg(p95_vals)
    rej_avg, rej_med = _agg(rej_vals)
    timeout_avg, timeout_med = _agg(timeout_vals)

    # 4) –ê—É–¥–∏—Ç events
    audit_events = _load_audit_events()
    print(f"üìã {len(audit_events)} audit event –æ–ª–¥–ª–æ–æ")

    sla_breaches = [e for e in audit_events if e.get("level") == "SLA_BREACH"]
    partial_filled = [e for e in audit_events if e.get("status") == "PARTIAL"]
    full_filled = [e for e in audit_events if e.get("status") == "FILLED"]

    partial_fill_ratio = None
    if len(full_filled) > 0:
        partial_fill_ratio = len(partial_filled) / (
            len(partial_filled) + len(full_filled)
        )

    # DR drill —à–∞–ª–≥–∞—Ö (—ç–Ω—ç 7 —Ö–æ–Ω–æ–≥—Ç DR event –±–∞–π—Å–∞–Ω —É—É)
    dr_events = [e for e in audit_events if "DR" in e.get("message", "").upper()]
    dr_drill_this_week = len(dr_events) > 0

    # 5) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫ –±—ç–ª—Ç–≥—ç—Ö
    stats = {
        "loop_latency_ms_p95": p95_med,  # –º–µ–¥–∏–∞–Ω –∞—à–∏–≥–ª–∞—è
        "rejected_rate": rej_med,
        "timeout_rate": timeout_med,
        "orders_total": orders_total,
        "partial_fill_ratio": partial_fill_ratio,
        "sla_breach_count": len(sla_breaches),
        "dr_drill_this_week": dr_drill_this_week,
        "audit_events_count": len(audit_events),
    }

    # 6) –ê—Ä–≥–∞ —Ö—ç–º–∂—ç—ç —Å–∞–Ω–∞–ª –±–æ–ª–≥–æ—Ö
    actions = _decide_actions(stats)

    # 7) Markdown —Ç–∞–π–ª–∞–Ω –±–∏—á–∏—Ö
    now = dt.datetime.utcnow()
    week_start = now - dt.timedelta(days=7)

    report = f"""# 7 –•–æ–Ω–æ–≥–∏–π–Ω “Æ–π–ª –ê–∂–∏–ª–ª–∞–≥–∞–∞–Ω—ã –¢–∞–π–ª–∞–Ω

**–•—É–≥–∞—Ü–∞–∞**: {week_start.strftime('%Y-%m-%d')} ‚Äî {now.strftime('%Y-%m-%d')}
**“Æ“Ø—Å–≥—ç—Å—ç–Ω**: {now.strftime('%Y-%m-%d %H:%M:%S')} UTC

## üéØ –ì–æ–ª “Æ–∑“Ø“Ø–ª—ç–ª—Ç“Ø“Ø–¥ (KPI)

| “Æ–∑“Ø“Ø–ª—ç–ª—Ç | –£—Ç–≥–∞ | –ó–æ—Ä–∏–ª—Ç |
|-----------|------|---------|
| **Loop Latency (P95)** | {_fmt(stats['loop_latency_ms_p95'], 'ms')} | < 200ms |
| **Reject Rate** | {_fmt(stats['rejected_rate'], '%', places=1)} | < 3% |
| **Timeout Rate** | {_fmt(stats['timeout_rate'], '%', places=1)} | < 1% |
| **–ù–∏–π—Ç Order** | {int(stats['orders_total']) if stats['orders_total'] else 0} | ‚Äî |
| **Partial‚ÜíFill Ratio** | {_fmt(stats['partial_fill_ratio'], '%', places=1)} | < 10% |

## üö® –ê—Å—É—É–¥–ª—É—É–¥

| –¢“Ø–≤—à–∏–Ω | –¢–æ–æ | –¢–∞–π–ª–±–∞—Ä |
|--------|-----|---------|
| **SLA –ó”©—Ä—á–∏–ª** | {stats['sla_breach_count']} | Service level agreement –∑”©—Ä—á—Å”©–Ω “Ø–π–ª–¥—ç–ª |
| **DR Drill** | {"‚úÖ" if stats['dr_drill_this_week'] else "‚ùå"} | Disaster recovery –¥–∞–¥–ª–∞–≥–∞ —Ö–∏–π–≥–¥—Å—ç–Ω —ç—Å—ç—Ö |
| **–ê—É–¥–∏—Ç Events** | {stats['audit_events_count']} | –ù–∏–π—Ç –∞—É–¥–∏—Ç –±–∏—á–ª—ç–≥–∏–π–Ω —Ç–æ–æ |

## üìã –°–∞–Ω–∞–ª –±–æ–ª–≥–æ—Ö –∞—Ä–≥–∞ —Ö—ç–º–∂—ç—ç

{chr(10).join(actions)}

## üìä –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª

- **Metrics Snapshots**: {len(snapshots)}
- **Audit Events**: {len(audit_events)}
- **–•—è–Ω–∞–ª—Ç—ã–Ω —Ö—É–≥–∞—Ü–∞–∞**: 7 —Ö–æ–Ω–æ–≥
- **–î–∞—Ä–∞–∞–≥–∏–π–Ω —Ç–∞–π–ª–∞–Ω**: {(now + dt.timedelta(days=7)).strftime('%Y-%m-%d')}

---
*–ê–≤—Ç–æ–º–∞—Ç–∞–∞—Ä “Ø“Ø—Å–≥—ç—Å—ç–Ω —Ç–∞–π–ª–∞–Ω | Bot Trading System*
"""

    # 8) –§–∞–π–ª –±–∏—á–∏—Ö
    DOCS.mkdir(exist_ok=True)
    report_path = DOCS / "WEEKLY_OPS_REPORT.md"

    # UTF-8 –∫–æ–¥—á–∏–ª–æ–ª—Ç–æ–π –±–∏—á–∏—Ö
    with report_path.open("w", encoding="utf-8") as f:
        f.write(report)

    print(f"‚úÖ –¢–∞–π–ª–∞–Ω –±—ç–ª—ç–Ω: {report_path}")
    print("üìã –•—É—Ä–∞–∞–Ω–≥—É–π:")
    print(f"   ‚Ä¢ Loop P95: {_fmt(stats['loop_latency_ms_p95'], 'ms')}")
    print(f"   ‚Ä¢ Reject: {_fmt(stats['rejected_rate'], '%', places=1)}")
    print(f"   ‚Ä¢ SLA –∑”©—Ä—á–∏–ª: {stats['sla_breach_count']}")
    print(f"   ‚Ä¢ DR drill: {'‚úÖ' if stats['dr_drill_this_week'] else '‚ùå'}")

    return 0


if __name__ == "__main__":
    import sys

    sys.exit(main())

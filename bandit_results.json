{
  "errors": [],
  "generated_at": "2025-09-07T19:11:53Z",
  "metrics": {
    "_totals": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 1,
      "CONFIDENCE.MEDIUM": 5,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 3,
      "SEVERITY.MEDIUM": 5,
      "SEVERITY.UNDEFINED": 0,
      "loc": 2728,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/broker\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 15,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/broker\\gateway.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 98,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/broker\\models.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 77,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/config.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 83,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/events\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 44,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/events\\bus.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 121,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/events\\types.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 268,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/executor\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 8,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/executor\\idempotent.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 206,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/executor\\order_book.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 1,
      "CONFIDENCE.MEDIUM": 3,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 4,
      "SEVERITY.UNDEFINED": 0,
      "loc": 343,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/executor\\reconciler.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 371,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/logger.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 28,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/mt5_client.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 2,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 184,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/sizing\\sizing.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 193,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/state.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 60,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/trade_executor.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 129,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/vision_context.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 271,
      "nosec": 0,
      "skipped_tests": 0
    },
    "core/vision_schema.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 229,
      "nosec": 0,
      "skipped_tests": 0
    }
  },
  "results": [
    {
      "code": "245                 cursor = conn.execute(\n246                     f\"\"\"\n247                     DELETE FROM sent\n248                     WHERE ts < datetime('now', '-{days_old} days')\n249                     \"\"\"\n250                 )\n",
      "col_offset": 24,
      "end_col_offset": 49,
      "filename": "core/executor\\idempotent.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 246,
      "line_range": [
        246,
        247,
        248,
        249
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "316                 \n317                 query = f\"UPDATE orders SET {', '.join(updates)} WHERE coid = ?\"\n318                 result = conn.execute(query, params)\n",
      "col_offset": 26,
      "end_col_offset": 44,
      "filename": "core/executor\\order_book.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 317,
      "line_range": [
        317
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "361             with self._get_connection() as conn:\n362                 cur = conn.execute(\"\"\"\n363                     SELECT coid, symbol, side, qty, filled_qty, avg_fill_price,\n364                            broker_order_id, status, sl, tp, created_ts, updated_ts\n365                     FROM orders WHERE status NOT IN ({})\n366                     ORDER BY created_ts\n367                 \"\"\".format(','.join(['?'] * len(terminal_statuses))), terminal_statuses)\n368                 \n",
      "col_offset": 35,
      "end_col_offset": 19,
      "filename": "core/executor\\order_book.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 362,
      "line_range": [
        362,
        363,
        364,
        365,
        366,
        367
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "417                 # Delete old fills first (foreign key constraint)\n418                 conn.execute(\"\"\"\n419                     DELETE FROM fills WHERE coid IN (\n420                         SELECT coid FROM orders \n421                         WHERE status IN ({}) AND updated_ts < ?\n422                     )\n423                 \"\"\".format(','.join(['?'] * len(terminal_statuses))), \n424                            list(terminal_statuses) + [cutoff_time])\n",
      "col_offset": 29,
      "end_col_offset": 19,
      "filename": "core/executor\\order_book.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 418,
      "line_range": [
        418,
        419,
        420,
        421,
        422,
        423
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "426                 # Delete old orders\n427                 result = conn.execute(\"\"\"\n428                     DELETE FROM orders WHERE status IN ({}) AND updated_ts < ?\n429                 \"\"\".format(','.join(['?'] * len(terminal_statuses))), \n430                            list(terminal_statuses) + [cutoff_time])\n",
      "col_offset": 38,
      "end_col_offset": 19,
      "filename": "core/executor\\order_book.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 427,
      "line_range": [
        427,
        428,
        429
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "14 \n15     def connect(\n16         self,\n17         login: int = 0,\n18         password: str = \"\",\n19         server: str = \"\",\n20         path: str | None = None,\n21         attach_mode: bool | None = None,\n22     ) -> bool:\n23         try:\n24             # Default: attach mode ON unless explicitly disabled\n25             if attach_mode is None:\n26                 attach_mode = self._env_bool(\"ATTACH_MODE\", default=True)\n27             # Log connection attempt (non-sensitive fields only)\n28             try:\n29                 logger.info(\n30                     f\"MT5 connect called | attach_mode={attach_mode} | path={path} | login_provided={bool(login)} | server_provided={bool(server)}\"\n31                 )\n32             except Exception:\n33                 # best-effort logging\n34                 logger.info(\"MT5 connect called\")\n35             # Initialize MT5\n36             if attach_mode:\n37                 # \u2757 DO NOT pass login/password in attach mode \u2014 just hook into the running terminal\n38                 # If path=None \u2192 attach to any running instance; if path given \u2192 try that binary\n39                 ok = mt5.initialize() if path is None else mt5.initialize(path)\n40             else:\n41                 ok = mt5.initialize(path, login=login, password=password, server=server)\n42             if not ok:\n43                 logger.error(f\"MT5 \u044d\u0445\u043b\u04af\u04af\u043b\u0436 \u0447\u0430\u0434\u0441\u0430\u043d\u0433\u04af\u0439: {mt5.last_error()}\")\n44                 return False\n45 \n46             # --- ATTACH MODE: \u0430\u043b\u044c \u0445\u044d\u0434\u0438\u0439\u043d \u043b\u043e\u0433\u0438\u043d \u0445\u0438\u0439\u0441\u044d\u043d \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0434 \u043d\u0430\u0430\u043b\u0434\u0430\u0445 ---\n47             if attach_mode:\n48                 acc = mt5.account_info()\n49                 if acc is None:\n50                     logger.error(\"MT5 \u043d\u044d\u0432\u0442\u0440\u044d\u044d\u0433\u04af\u0439 \u0431\u0430\u0439\u043d\u0430. Terminal \u043d\u044d\u044d\u0436 login \u0445\u0438\u0439\u043d\u044d \u04af\u04af.\")\n51                     return False\n52                 ti = mt5.terminal_info()\n53                 logger.info(\n54                     f\"MT5 \u0430\u043c\u0436\u0438\u043b\u0442\u0442\u0430\u0439 \u0445\u043e\u043b\u0431\u043e\u0433\u0434\u043b\u043e\u043e | \"\n55                     f\"\u0422\u0435\u0440\u043c\u0438\u043d\u0430\u043b={getattr(ti,'build',None)} | \"\n56                     f\"\u0417\u0430\u043c={getattr(ti,'path',None)} | \"\n57                     f\"\u0414\u0430\u043d\u0441={acc.login} | \"\n58                     f\"\u0411\u0440\u043e\u043a\u0435\u0440={acc.server} | \"\n59                     f\"\u041d\u044d\u0440={acc.name} | \"\n60                     f\"\u0425\u04e9\u0448\u04af\u04af\u0440\u044d\u0433={acc.leverage} | \"\n61                     f\"\u04ae\u043b\u0434\u044d\u0433\u0434\u044d\u043b=${acc.balance:.2f} | \"\n62                     f\"Equity=${acc.equity:.2f}\"\n63                 )\n64                 self.initialized = True\n65                 return True\n66 \n67             # --- LOGIN MODE: \u043a\u0440\u0435\u0434\u0435\u043d\u0448\u043b\u044d\u044d\u0440 \u043d\u044d\u0432\u0442\u0440\u044d\u0445 ---\n68             if not login or not password or not server:\n69                 logger.error(\"Login \u0433\u043e\u0440\u0438\u043c\u0434 MT5 \u043d\u044d\u0432\u0442\u0440\u044d\u0445 \u043c\u044d\u0434\u044d\u044d\u043b\u044d\u043b \u0434\u0443\u0442\u0443\u0443 \u0431\u0430\u0439\u043d\u0430\")\n70                 return False\n71 \n72             authorized = mt5.login(login=login, password=password, server=server)\n73             if not authorized:\n74                 logger.error(f\"MT5 \u0440\u0443\u0443 \u043d\u044d\u0432\u0442\u044d\u0440\u0447 \u0447\u0430\u0434\u0441\u0430\u043d\u0433\u04af\u0439: {mt5.last_error()}\")\n75                 return False\n76 \n77             acc = mt5.account_info()\n78             if acc is None:\n79                 logger.error(\"\u0414\u0430\u043d\u0441 \u0440\u0443\u0443 \u043d\u044d\u0432\u0442\u044d\u0440\u0441\u044d\u043d \u0447 \u043c\u044d\u0434\u044d\u044d\u043b\u044d\u043b \u0430\u0432\u0447 \u0447\u0430\u0434\u0441\u0430\u043d\u0433\u04af\u0439\")\n80                 return False\n81 \n82             ti = mt5.terminal_info()\n83             logger.info(\n84                 f\"MT5 connected | terminal_build={getattr(ti,'build',None)} | path={getattr(ti,'path',None)} | \"\n85                 f\"account_login={acc.login} | server={acc.server} | name={acc.name} | leverage={acc.leverage} | \"\n86                 f\"balance={acc.balance:.2f} | equity={acc.equity:.2f}\"\n87             )\n88             self.initialized = True\n89             return True\n90 \n91         except Exception as e:\n92             logger.error(f\"MT5 \u0445\u043e\u043b\u0431\u043e\u043b\u0442\u044b\u043d \u0430\u043b\u0434\u0430\u0430: {str(e)}\")\n93             return False\n94 \n95         finally:\n96             if not self.initialized:\n97                 try:\n98                     mt5.shutdown()\n99                 except:\n100                     pass\n101 \n",
      "col_offset": 4,
      "end_col_offset": 24,
      "filename": "core/mt5_client.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 259,
        "link": "https://cwe.mitre.org/data/definitions/259.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Possible hardcoded password: ''",
      "line_number": 15,
      "line_range": [
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b107_hardcoded_password_default.html",
      "test_id": "B107",
      "test_name": "hardcoded_password_default"
    },
    {
      "code": "98                     mt5.shutdown()\n99                 except:\n100                     pass\n101 \n",
      "col_offset": 16,
      "end_col_offset": 24,
      "filename": "core/mt5_client.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 99,
      "line_range": [
        99,
        100
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "44                 return sym.trade_fill_mode\n45         except Exception:\n46             pass\n47         return mt5.ORDER_FILLING_IOC\n",
      "col_offset": 8,
      "end_col_offset": 16,
      "filename": "core/trade_executor.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 45,
      "line_range": [
        45,
        46
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    }
  ]
}

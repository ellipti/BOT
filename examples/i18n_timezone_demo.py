#!/usr/bin/env python3
"""
Example demonstrating i18n and timezone usage in the trading system.
Shows how to use Mongolian localization and Ulaanbaatar timezone.
"""
import logging
from datetime import datetime

from config.settings import get_settings
from utils.i18n import alert_message, get_message, log_message, t
from utils.timez import fmt_ts, fmt_ts_compact, fmt_ts_short, now_str, today_str, ub_now


# Configure logging with Mongolian messages
def setup_logging():
    """Setup logging with localized messages"""
    settings = get_settings()

    # Create logger
    logger = logging.getLogger("trading_bot")
    logger.setLevel(logging.INFO)

    # Create formatter with timezone
    formatter = logging.Formatter(
        f"%(asctime)s [{settings.TZ}] %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )

    # Console handler
    console = logging.StreamHandler()
    console.setFormatter(formatter)
    logger.addHandler(console)

    return logger


def demonstrate_i18n():
    """Demonstrate internationalization features"""
    settings = get_settings()
    logger = setup_logging()

    print("=== –ú–æ–Ω–≥–æ–ª —Ö—ç–ª–Ω–∏–π –º–µ—Å—Å–µ–∂ –∂–∏—à—ç—ç–Ω“Ø“Ø–¥ ===")

    # System status messages
    print("\n1. –°–∏—Å—Ç–µ–º–∏–π–Ω —Å—Ç–∞—Ç—É—Å:")
    print(f"   {t('system_startup')}")
    print(f"   {t('system_ready')}")
    print(f"   {t('connection_restored')}")

    # Trading messages
    print("\n2. –ê—Ä–∏–ª–∂–∞–∞–Ω—ã –º–µ—Å—Å–µ–∂“Ø“Ø–¥:")
    print(f"   {t('order_placed', symbol='XAUUSD', side='BUY', qty='0.1')}")
    print(f"   {t('order_filled', symbol='XAUUSD', filled_qty='0.1', price='2650.50')}")
    print(
        f"   {t('position_opened', symbol='XAUUSD', side='BUY', qty='0.1', price='2650.50')}"
    )
    print(f"   {t('stop_loss_hit', symbol='XAUUSD', price='2640.00')}")

    # Risk management messages
    print("\n3. –≠—Ä—Å–¥—ç–ª–∏–π–Ω —É–¥–∏—Ä–¥–ª–∞–≥–∞:")
    print(f"   {t('risk_level_high', level=75)}")
    print(f"   {t('daily_limit_reached', limit_type='–∞—Ä–∏–ª–∂–∞–∞')}")
    print(f"   {t('circuit_breaker_triggered', reason='–¥–∞—Ä–∞–∞–ª—Å–∞–Ω 5 –∞–ª–¥–∞–≥–¥–∞–ª')}")
    print(f"   {t('cooldown_active', remaining_min=15)}")

    # Alert messages
    print("\n4. –ê–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞:")
    print(f"   {t('sla_breach', metric='—Ö–æ—Ü—Ä–æ–ª—Ç', value='150ms', threshold='100ms')}")
    print(f"   {t('health_degraded', status='–¥–æ–≥–æ–ª–¥–æ–ª—Ç–æ–π', reason='MT5 —Ö–æ–ª–±–æ–ª—Ç')}")
    print(f"   {t('latency_high', latency=250, threshold=100)}")

    # Backup and DR messages
    print("\n5. –ù”©”©—Ü–ª”©–ª—Ç/–°—ç—Ä–≥—ç—ç–ª—Ç:")
    print(f"   {t('backup_started', backup_type='–±“Ø—Ä—ç–Ω')}")
    print(f"   {t('backup_completed', file_path='backup_20250908.tar.gz', size_mb=15)}")
    print(f"   {t('dr_drill_started', drill_id='DR_20250908_001')}")
    print(f"   {t('dr_drill_completed', status='–∞–º–∂–∏–ª—Ç—Ç–∞–π')}")


def demonstrate_timezone():
    """Demonstrate timezone handling"""
    settings = get_settings()

    print(f"\n=== –¶–∞–≥–∏–π–Ω –±“Ø—Å–∏–π–Ω –∂–∏—à—ç—ç–Ω“Ø“Ø–¥ ({settings.TZ}) ===")

    # Current time in different formats
    current_time = ub_now(settings)
    print("\n1. –û–¥–æ–æ–≥–∏–π–Ω —Ü–∞–≥:")
    print(f"   –ë“Ø—Ä—ç–Ω:    {fmt_ts(current_time, settings)}")
    print(f"   –ë–æ–≥–∏–Ω–æ:   {fmt_ts_short(current_time, settings)}")
    print(f"   –•—É—Ä–∞–∞–Ω–≥—É–π: {fmt_ts_compact(current_time, settings)}")
    print(f"   ”®–Ω”©”©–¥”©—Ä:  {today_str(settings)}")

    # Compare with UTC
    utc_time = datetime.utcnow()
    print("\n2. UTC-—Ç–∞–π —Ö–∞—Ä—å—Ü—É—É–ª–∞—Ö:")
    print(f"   UTC —Ü–∞–≥:      {utc_time.strftime('%Y-%m-%d %H:%M:%S UTC')}")
    print(f"   –£–ë —Ü–∞–≥:       {fmt_ts(current_time, settings)}")
    print(f"   –Ø–ª–≥–∞–∞:       {current_time.utcoffset()}")


def demonstrate_logging_integration():
    """Demonstrate logging with localized messages"""
    settings = get_settings()
    logger = setup_logging()

    print("\n=== –õ–æ–≥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏ –∂–∏—à—ç—ç ===")

    # Log messages with timestamps in UB timezone
    current_time = ub_now(settings)

    # Simulate trading events with localized messages
    logger.info(f"[{fmt_ts_short(current_time, settings)}] {t('system_startup')}")
    logger.info(
        f"[{fmt_ts_short(current_time, settings)}] {t('feed_connected', feed_type='MT5')}"
    )
    logger.info(
        f"[{fmt_ts_short(current_time, settings)}] {t('order_placed', symbol='XAUUSD', side='BUY', qty='0.1')}"
    )
    logger.warning(
        f"[{fmt_ts_short(current_time, settings)}] {t('latency_high', latency=150, threshold=100)}"
    )
    logger.error(
        f"[{fmt_ts_short(current_time, settings)}] {t('connection_lost', reason='—Å“Ø–ª–∂—ç—ç–Ω–∏–π –∞–ª–¥–∞–∞')}"
    )


def demonstrate_conditional_localization():
    """Demonstrate conditional localization based on settings"""
    settings = get_settings()

    print(f"\n=== –ù”©—Ö—Ü”©–ª—Ç –æ—Ä—á—É—É–ª–≥–∞ (LOCALE={settings.LOCALE}) ===")

    # Example of using different messages based on locale
    messages = [
        ("system_ready", {}),
        ("order_placed", {"symbol": "XAUUSD", "side": "BUY", "qty": "0.1"}),
        ("risk_level_high", {"level": 80}),
        ("backup_completed", {"file_path": "backup.tar.gz", "size_mb": 25}),
    ]

    print("\n–ú–æ–Ω–≥–æ–ª —Ö—ç–ª (mn):")
    for key, params in messages:
        msg = get_message(key, locale="mn", **params)
        print(f"   {key}: {msg}")

    print("\n–ê–Ω–≥–ª–∏ —Ö—ç–ª (en) - fallback:")
    for key, params in messages:
        msg = get_message(key, locale="en", **params)
        print(f"   {key}: {msg}")


if __name__ == "__main__":
    print("üåè –ú–æ–Ω–≥–æ–ª —Ö—ç–ª–Ω–∏–π –¥—ç–º–∂–ª—ç–≥ –±–æ–ª–æ–Ω —Ü–∞–≥–∏–π–Ω –±“Ø—Å —Ç–æ—Ö–∏—Ä–≥–æ–æ")
    print("=" * 60)

    # Run demonstrations
    demonstrate_i18n()
    demonstrate_timezone()
    demonstrate_logging_integration()
    demonstrate_conditional_localization()

    print("\n‚úÖ –ë“Ø—Ö –∂–∏—à—ç—ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –∞–∂–∏–ª–ª–∞–ª–∞–∞!")
    print("üìù config/settings.py –¥—ç—ç—Ä LOCALE –±–æ–ª–æ–Ω TZ —Ç–æ—Ö–∏—Ä—É—É–ª–Ω–∞ —É—É")
    print("üîß utils/i18n.py –¥—ç—ç—Ä —à–∏–Ω—ç –º–µ—Å—Å–µ–∂“Ø“Ø–¥ –Ω—ç–º–Ω—ç “Ø“Ø")
    print("‚è∞ utils/timez.py –∞—à–∏–≥–ª–∞–Ω —Ü–∞–≥–∏–π–Ω –±“Ø—Å —Ö–∞—Ä—É—É–ª–Ω–∞ —É—É")

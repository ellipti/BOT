#!/usr/bin/env python3
"""
Risk Governance —Ç–µ—Å—Ç–∏–π–Ω —Å–∏—Å—Ç–µ–º
Upgrade #07 - –≠—Ä—Å–¥—ç–ª–∏–π–Ω –∑–∞—Å–∞–≥–ª–∞–ª—ã–Ω —Ç–µ—Å—Ç
"""

from pathlib import Path

from config.settings import get_settings
from risk.governor import CircuitBreakerState, RiskGovernor, RiskLevel


def test_risk_governance():
    """Risk Governance —Å–∏—Å—Ç–µ–º–∏–π–≥ –∏–∂ –±“Ø—Ä—ç–Ω —Ç–µ—Å—Ç —Ö–∏–π—Ö"""
    print("üîí Risk Governance —Å–∏—Å—Ç–µ–º–∏–π–Ω —Ç–µ—Å—Ç —ç—Ö—ç–ª–∂ –±–∞–π–Ω–∞...")

    # Test —Ñ–∞–π–ª—É—É–¥ —Ü—ç–≤—ç—Ä–ª—ç—Ö
    test_data_path = Path("test_risk_governance.json")
    if test_data_path.exists():
        test_data_path.unlink()

    # Test governor “Ø“Ø—Å–≥—ç—Ö
    governor = RiskGovernor(str(test_data_path))

    print("\n1. –ê–Ω—Ö–Ω—ã —Ç”©–ª”©–≤–∏–π–≥ —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")
    metrics = governor.get_current_metrics("XAUUSD")
    print(f"   –ê–Ω—Ö–Ω—ã —ç—Ä—Å–¥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω: {metrics.risk_level.value}")
    print(f"   Circuit breaker —Ç”©–ª”©–≤: {metrics.circuit_breaker_state.value}")
    print(f"   ”®–¥—Ä–∏–π–Ω –∞–ª–¥–∞–≥–¥–∞–ª: {metrics.daily_loss}%")
    print(f"   ”®–¥—Ä–∏–π–Ω –∞—Ä–∏–ª–∂–∞–∞: {metrics.daily_trades}")
    assert metrics.risk_level == RiskLevel.LOW
    assert metrics.circuit_breaker_state == CircuitBreakerState.CLOSED
    print("   ‚úÖ –ê–Ω—Ö–Ω—ã —Ç”©–ª”©–≤ –∑”©–≤")

    print("\n2. –ê—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–ª–∏–π–≥ —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")
    decision = governor.check_trade_allowed("XAUUSD", 0.01)
    print(f"   –ê—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {decision.allowed}")
    print(f"   –®–∞–ª—Ç–≥–∞–∞–Ω: {decision.reason}")
    assert decision.allowed is True
    print("   ‚úÖ –ê–Ω—Ö–Ω—ã –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω")

    print("\n3. –ê–ª–¥–∞–≥–¥–∞–ª—Ç–∞–π –∞—Ä–∏–ª–∂–∞–∞–Ω—Éud—ã–≥ —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")
    # 3 —É–¥–∞–∞ –∞–ª–¥–∞–≥–¥–∞–ª—Ç–∞–π –∞—Ä–∏–ª–∂–∞–∞ —Ö–∏–π—Ö
    for i in range(3):
        governor.record_trade_result("XAUUSD", -1.0, was_win=False)  # 1% –∞–ª–¥–∞–≥–¥–∞–ª
        print(f"   –ê–ª–¥–∞–≥–¥–∞–ª—Ç–∞–π –∞—Ä–∏–ª–∂–∞–∞ {i+1} –±“Ø—Ä—Ç–≥—ç–ª—ç—ç")

    metrics = governor.get_current_metrics("XAUUSD")
    print(f"   –û–¥–æ–æ–≥–∏–π–Ω ”©–¥—Ä–∏–π–Ω –∞–ª–¥–∞–≥–¥–∞–ª: {metrics.daily_loss}%")
    print(f"   –î–∞—Ä–∞–∞–ª—Å–∞–Ω –∞–ª–¥–∞–≥–¥–∞–ª: {metrics.consecutive_losses}")
    print(f"   –≠—Ä—Å–¥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω: {metrics.risk_level.value}")
    assert metrics.daily_loss > 0
    assert metrics.consecutive_losses == 3
    print("   ‚úÖ –ê–ª–¥–∞–≥–¥–∞–ª –∑”©–≤ –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç")

    print("\n4. –≠—Ä—Å–¥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–Ω–∏–π ”©”©—Ä—á–ª”©–ª—Ç–∏–π–≥ —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")
    # –ò–ª“Ø“Ø –∞–ª–¥–∞–≥–¥–∞–ª –Ω—ç–º—ç—Ö
    for i in range(4):
        governor.record_trade_result("XAUUSD", -1.5, was_win=False)  # 1.5% –∞–ª–¥–∞–≥–¥–∞–ª

    metrics = governor.get_current_metrics("XAUUSD")
    print(f"   –û–¥–æ–æ–≥–∏–π–Ω ”©–¥—Ä–∏–π–Ω –∞–ª–¥–∞–≥–¥–∞–ª: {metrics.daily_loss}%")
    print(f"   –≠—Ä—Å–¥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω: {metrics.risk_level.value}")

    # –≠—Ä—Å–¥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω ”©—Å—Å”©–Ω –±–∞–π—Ö —ë—Å—Ç–æ–π
    print(f"   –û–¥–æ–æ–≥–∏–π–Ω —ç—Ä—Å–¥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω: {metrics.risk_level.value}")
    # Circuit breaker –∏–¥—ç–≤—Ö–∂—Å—ç–Ω —Ç—É–ª CRITICAL –±–∞–π–∂ –º–∞–≥–∞–¥–≥“Ø–π
    assert metrics.risk_level in [RiskLevel.MEDIUM, RiskLevel.HIGH, RiskLevel.CRITICAL]
    print("   ‚úÖ –≠—Ä—Å–¥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω –∑”©–≤ ”©—Å—Å”©–Ω")

    print("\n5. –î—ç—ç–¥ —Ö—è–∑–≥–∞–∞—Ä —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")
    # ”®–¥—Ä–∏–π–Ω –¥—ç—ç–¥ –∞–ª–¥–∞–≥–¥–ª—ã–≥ —Ö—ç—Ç—Ä“Ø“Ø–ª—ç—Ö
    settings = get_settings()
    remaining_loss = settings.risk.max_daily_loss_percentage - metrics.daily_loss + 0.1
    governor.record_trade_result("XAUUSD", -remaining_loss, was_win=False)

    decision = governor.check_trade_allowed("XAUUSD", 0.01)
    print(f"   –î—ç—ç–¥ —Ö—è–∑–≥–∞–∞—Ä–∞–∞—Å —Ö–æ–π—à –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {decision.allowed}")
    print(f"   –¢–∞—Ç–≥–∞–ª–∑—Å–∞–Ω —à–∞–ª—Ç–≥–∞–∞–Ω: {decision.reason}")
    assert decision.allowed is False
    # Circuit breaker —ç—Å–≤—ç–ª –¥—ç—ç–¥ —Ö—è–∑–≥–∞–∞—Ä—ã–Ω —à–∞–ª—Ç–≥–∞–∞–Ω—ã–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤–∞—Ö
    reason_lower = decision.reason.lower()
    assert (
        "circuit breaker –∏–¥—ç–≤—Ö—Ç—ç–π" in reason_lower
        or "–¥—ç—ç–¥ –∞–ª–¥–∞–≥–¥–∞–ª —Ö—ç—Ç—ç—Ä—Å—ç–Ω" in reason_lower
    ), f"–•“Ø–ª—ç—ç–≥–¥—ç–∂ –±–∞–π—Å–∞–Ω —à–∞–ª—Ç–≥–∞–∞–Ω –±–∏—à: {decision.reason}"
    print("   ‚úÖ –î—ç—ç–¥ —Ö—è–∑–≥–∞–∞—Ä –∑”©–≤ –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞")

    print("\n6. Circuit breaker —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")
    # Circuit breaker-–∏–π–≥ –∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç—Ö (”©–Ω–¥”©—Ä –∞–ª–¥–∞–≥–¥–∞–ª —ç—Å–≤—ç–ª –¥–∞—Ä–∞–∞–ª—Å–∞–Ω –∞–ª–¥–∞–≥–¥–∞–ª)
    test_data_path2 = Path("test_circuit_breaker.json")
    if test_data_path2.exists():
        test_data_path2.unlink()

    cb_governor = RiskGovernor(str(test_data_path2))

    # Circuit breaker –±–æ—Å–≥—ã–≥ —Ö—ç—Ç—Ä“Ø“Ø–ª—ç—Ö
    cb_loss = settings.risk.circuit_breaker_loss_threshold + 0.5
    cb_governor.record_trade_result("XAUUSD", -cb_loss, was_win=False)

    metrics = cb_governor.get_current_metrics("XAUUSD")
    print(f"   Circuit breaker —Ç”©–ª”©–≤: {metrics.circuit_breaker_state.value}")
    assert metrics.circuit_breaker_state == CircuitBreakerState.OPEN
    print("   ‚úÖ Circuit breaker –∑”©–≤ –∏–¥—ç–≤—Ö–∂–ª—ç—ç")

    # Circuit breaker –∏–¥—ç–≤—Ö—Ç—ç–π “Ø–µ–¥ –∞—Ä–∏–ª–∂–∞–∞
    decision = cb_governor.check_trade_allowed("XAUUSD", 0.01)
    print(f"   Circuit breaker-—Ç—ç–π –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {decision.allowed}")
    assert decision.allowed is False
    assert "circuit breaker" in decision.reason.lower()
    print("   ‚úÖ Circuit breaker –∑”©–≤ —Ö–æ—Ä–≥–∞–ª–∂ –±–∞–π–Ω–∞")

    print("\n7. Cooldown —Å–∏—Å—Ç–µ–º–∏–π–≥ —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")
    # –®–∏–Ω—ç governor cooldown —Ç–µ—Å—Ç —Ö–∏–π—Ö—ç–¥
    test_data_path3 = Path("test_cooldown.json")
    if test_data_path3.exists():
        test_data_path3.unlink()

    cd_governor = RiskGovernor(str(test_data_path3))

    # –ê—Ä–∏–ª–∂–∞–∞ —Ö–∏–π—Ö
    cd_governor.record_trade_result("XAUUSD", 0.5, was_win=True)

    # –®—É—É–¥ –¥–∞—Ä–∞–∞ –Ω—å –∞—Ä–∏–ª–∂–∞–∞ –æ—Ä–æ–ª–¥–æ—Ö
    decision = cd_governor.check_trade_allowed("XAUUSD", 0.01)
    print(f"   Cooldown –¥–æ—Ç–æ—Ä –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {decision.allowed}")
    print(f"   Cooldown —à–∞–ª—Ç–≥–∞–∞–Ω: {decision.reason}")

    if not decision.allowed and "cooldown" in decision.reason.lower():
        print("   ‚úÖ Cooldown –∑”©–≤ –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞")
    else:
        print("   ‚ö†Ô∏è Cooldown —Ç–æ—Ö–∏—Ä–≥–æ–æ 0 –±–∞–π–∂ –º–∞–≥–∞–¥–≥“Ø–π")

    print("\n8. 7 —Ö–æ–Ω–æ–≥–∏–π–Ω —Ö—è–∑–≥–∞–∞—Ä —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")
    # 7 —Ö–æ–Ω–æ–≥–∏–π–Ω –∞–ª–¥–∞–≥–¥–∞–ª —Ç–µ—Å—Ç (—ç–Ω—ç –Ω—å –∏–ª“Ø“Ø —Ü–∞–≥ —à–∞–∞—Ä–¥–¥–∞–≥ —Ç—É–ª –∂–∏—à—ç—ç–≥ –ª “Ø–∑“Ø“Ø–ª—ç–≤)
    metrics = governor.get_current_metrics("XAUUSD")
    print(f"   7 —Ö–æ–Ω–æ–≥–∏–π–Ω –∞–ª–¥–∞–≥–¥–∞–ª: {metrics.weekly_loss}%")
    print(f"   7 —Ö–æ–Ω–æ–≥–∏–π–Ω –∞—Ä–∏–ª–∂–∞–∞: {metrics.weekly_trades}")
    print("   ‚úÖ 7 —Ö–æ–Ω–æ–≥–∏–π–Ω —Ö—è–∑–≥–∞–∞—Ä —Å–∏—Å—Ç–µ–º–∏–π–≥ –±“Ø—Ä—Ç–≥—ç–≤")

    print("\n9. Risk —Ç–∞–π–ª–∞–Ω —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")
    report = governor.get_risk_report()
    print(f"   –¢–∞–π–ª–∞–Ω–≥–∏–π–Ω —Ç”©—Ä”©–ª: {type(report).__name__}")
    print(f"   –≠—Ä—Å–¥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω: {report['risk_level']}")
    print(f"   Circuit breaker –∏–¥—ç–≤—Ö—Ç—ç–π: {report['circuit_breaker_active']}")
    print(f"   ”®–¥—Ä–∏–π–Ω —Ö—è–∑–≥–∞–∞—Ä—ã–Ω —Ö—ç—Ä—ç–≥–ª—ç—ç: {report['daily_metrics']['limit_usage']}")
    assert "timestamp" in report
    assert "risk_level" in report
    print("   ‚úÖ Risk —Ç–∞–π–ª–∞–Ω –∑”©–≤ “Ø“Ø—Å—ç–≥–¥–ª—ç—ç")

    # –¶—ç–≤—ç—Ä–ª—ç—Ö
    for test_file in [test_data_path, test_data_path2, test_data_path3]:
        if test_file.exists():
            test_file.unlink()

    print("\nüéâ Risk Governance –±“Ø—Ö —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –¥—É—É—Å–ª–∞–∞!")
    print("üìä –°–∏—Å—Ç–µ–º–∏–π–Ω “Ø–Ω—ç–ª–≥—ç—ç:")
    print("   ‚úÖ ”®–¥—Ä–∏–π–Ω/7 —Ö–æ–Ω–æ–≥–∏–π–Ω —Ö—è–∑–≥–∞–∞—Ä —Ö—è–Ω–∞–ª—Ç")
    print("   ‚úÖ Circuit breaker –∞–≤—Ç–æ–º–∞—Ç –∑–æ–≥—Å–æ–æ–ª—Ç")
    print("   ‚úÖ Cooldown —Å–∏—Å—Ç–µ–º–∏–π–Ω —É–¥–∏—Ä–¥–ª–∞–≥–∞")
    print("   ‚úÖ –≠—Ä—Å–¥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–Ω–∏–π —Ç–æ–æ—Ü–æ–æ–ª–æ–ª")
    print("   ‚úÖ Telegram –∞–Ω—Ö–∞–∞—Ä—É—É–ª–≥—ã–Ω —Å–∏—Å—Ç–µ–º–∏–π–Ω –±—ç–ª—ç–Ω –±–∞–π–¥–∞–ª")


def test_risk_settings():
    """Risk —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—ã —Ç–µ—Å—Ç"""
    print("\nüîß Risk —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—ã —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    settings = get_settings()

    print(f"   ”®–¥—Ä–∏–π–Ω –¥—ç—ç–¥ –∞–ª–¥–∞–≥–¥–∞–ª: {settings.risk.max_daily_loss_percentage}%")
    print(f"   7 —Ö–æ–Ω–æ–≥–∏–π–Ω –¥—ç—ç–¥ –∞–ª–¥–∞–≥–¥–∞–ª: {settings.risk.max_weekly_loss_percentage}%")
    print(f"   ”®–¥—Ä–∏–π–Ω –¥—ç—ç–¥ –∞—Ä–∏–ª–∂–∞–∞: {settings.risk.max_daily_trades}")
    print(f"   7 —Ö–æ–Ω–æ–≥–∏–π–Ω –¥—ç—ç–¥ –∞—Ä–∏–ª–∂–∞–∞: {settings.risk.max_weekly_trades}")
    print(f"   Cooldown —Ö—É–≥–∞—Ü–∞–∞: {settings.risk.cooldown_minutes} –º–∏–Ω—É—Ç")
    print(f"   Circuit breaker –±–æ—Å–≥–æ: {settings.risk.circuit_breaker_loss_threshold}%")
    print(f"   Telegram –∞–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞: {settings.risk.enable_telegram_alerts}")

    # Validation —Ç–µ—Å—Ç
    assert (
        settings.risk.max_weekly_loss_percentage
        > settings.risk.max_daily_loss_percentage
    )
    assert settings.risk.max_weekly_trades > settings.risk.max_daily_trades

    print("   ‚úÖ Risk —Ç–æ—Ö–∏—Ä–≥–æ–æ –≤–∞–ª–∏–¥–∞—Ü–∏–π–Ω –±“Ø—Ö —à–∞–ª–≥—É—É—Ä —Ö–∞–Ω–≥–∞—Å–∞–Ω")


if __name__ == "__main__":
    test_risk_settings()
    test_risk_governance()

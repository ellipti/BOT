#!/usr/bin/env python3
"""
Calendar Guard —Å–∏—Å—Ç–µ–º–∏–π–Ω —Ç–µ—Å—Ç
–≠–¥–∏–π–Ω –∑–∞—Å–≥–∏–π–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±—É—Ñ–µ—Ä/–∫—ç—à —Å–∏—Å—Ç–µ–º–∏–π–Ω —à–∞–ª–≥–∞–ª—Ç

–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—É–¥:
1. Calendar Guard —ç—Ö–ª“Ø“Ø–ª—ç–ª—Ç
2. Mock —ç–≤–µ–Ω—Ç ”©–≥”©–≥–¥–ª–∏–π–Ω —Ç–µ—Å—Ç
3. Blackout window —Ç–æ–æ—Ü–æ–æ–ª–æ–ª
4. Trading permission —à–∞–ª–≥–∞–ª—Ç
5. Cache —Å–∏—Å—Ç–µ–º–∏–π–Ω –≤–∞–ª–∏–¥–∞—Ü–∏
6. API retry/backoff —Ç–µ—Å—Ç
7. Event importance filtering
8. Multiple blackout handling
9. Next clear time —Ç–æ–æ—Ü–æ–æ–ª–æ–ª
"""

import asyncio
import time
from datetime import UTC, datetime, timedelta
from pathlib import Path

from config.settings import get_settings
from integrations.calendar import (
    BlackoutStatus,
    CalendarGuard,
    EconomicEvent,
    EventImportance,
)


def test_calendar_guard():
    print("üîß Calendar Guard —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—ã —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    # Settings —à–∞–ª–≥–∞—Ö
    settings = get_settings()
    print(f"   Calendar –∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç–≥–¥—Å—ç–Ω: {settings.trading.calendar_enabled}")
    print(
        f"   API —Ç“Ø–ª—Ö“Ø“Ø—Ä –±–∞–π–≥–∞–∞: {'–¢–∏–π–º' if settings.trading.trading_economics_api_key else '“Æ–≥“Ø–π'}"
    )
    print("   ‚úÖ Calendar Guard —Ç–æ—Ö–∏—Ä–≥–æ–æ –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    print("\nüîí Calendar Guard —Å–∏—Å—Ç–µ–º–∏–π–Ω —Ç–µ—Å—Ç —ç—Ö—ç–ª–∂ –±–∞–π–Ω–∞...")

    # –¢–µ—Å—Ç —Ñ–∞–π–ª—ã–Ω –∑–∞–º “Ø“Ø—Å–≥—ç—Ö
    test_cache_path = Path("test_calendar_cache.json")
    if test_cache_path.exists():
        test_cache_path.unlink()

    # Custom settings “Ø“Ø—Å–≥—ç—Ö
    class MockSettings:
        class Trading:
            trading_economics_api_key = "test_key"
            calendar_enabled = True

        trading = Trading()

    # Calendar Guard “Ø“Ø—Å–≥—ç—Ö
    guard = CalendarGuard(MockSettings())
    guard.cache_path = test_cache_path

    print("\n1. –ê–Ω—Ö–Ω—ã —Ç”©–ª”©–≤–∏–π–≥ —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")
    status = guard.get_calendar_status()
    print(f"   Cache —Ö“Ø—á–∏–Ω—Ç—ç–π: {status['cache_valid']}")
    print(f"   –≠–≤–µ–Ω—Ç–∏–π–Ω —Ç–æ–æ: {status['events_count']}")
    print(f"   API —Ç–æ—Ö–∏—Ä—É—É–ª–∞–≥–¥—Å–∞–Ω: {status['api_configured']}")
    print("   ‚úÖ –ê–Ω—Ö–Ω—ã —Ç”©–ª”©–≤ –∑”©–≤")

    print("\n2. Mock —ç–≤–µ–Ω—Ç ”©–≥”©–≥–¥–ª”©”©—Ä —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    # Mock —ç–≤–µ–Ω—Ç“Ø“Ø–¥ “Ø“Ø—Å–≥—ç—Ö
    now = datetime.now(UTC)
    mock_events = [
        {
            "id": "test_1",
            "title": "NFP (Non-Farm Payrolls)",
            "country": "US",
            "category": "Employment",
            "importance": EventImportance.CRITICAL,
            "datetime": now + timedelta(minutes=10),  # 10 –º–∏–Ω—É—Ç—ã–Ω –¥–∞—Ä–∞–∞
            "currency": "USD",
        },
        {
            "id": "test_2",
            "title": "CPI Data",
            "country": "US",
            "category": "Inflation",
            "importance": EventImportance.HIGH,
            "datetime": now + timedelta(hours=2),  # 2 —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞
            "currency": "USD",
        },
        {
            "id": "test_3",
            "title": "GDP Growth",
            "country": "EU",
            "category": "Economy",
            "importance": EventImportance.MEDIUM,
            "datetime": now
            - timedelta(minutes=5),  # 5 –º–∏–Ω—É—Ç—ã–Ω ”©–º–Ω”© (post-event blackout)
            "currency": "EUR",
        },
    ]

    # Mock —ç–≤–µ–Ω—Ç“Ø“Ø–¥–∏–π–≥ –∫—ç—à–∏–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö
    cache_data = {
        "events": [
            {
                "id": event["id"],
                "title": event["title"],
                "country": event["country"],
                "category": event["category"],
                "importance": event["importance"].value,
                "datetime": event["datetime"].isoformat(),
                "forecast": None,
                "previous": None,
                "actual": None,
                "currency": event["currency"],
                "unit": None,
            }
            for event in mock_events
        ],
        "last_update": time.time(),
        "api_calls": 1,
        "last_api_call": time.time(),
    }

    guard._save_cache_data(cache_data)

    print(f"   Mock —ç–≤–µ–Ω—Ç“Ø“Ø–¥–∏–π–≥ “Ø“Ø—Å–≥—ç–ª—ç—ç: {len(mock_events)} —ç–≤–µ–Ω—Ç")
    print("   ‚úÖ Mock ”©–≥”©–≥–¥”©–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    print("\n3. Blackout window —Ç–æ–æ—Ü–æ–æ–ª–æ–ª—ã–≥ —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    # NFP —ç–≤–µ–Ω—Ç–∏–π–Ω blackout window —à–∞–ª–≥–∞—Ö (CRITICAL = 60 –º–∏–Ω ”©–º–Ω”©, 30 –º–∏–Ω –¥–∞—Ä–∞–∞)
    nfp_event = EconomicEvent(**mock_events[0])
    blackout = guard._calculate_blackout_window(nfp_event, now)

    if blackout:
        print(f"   NFP blackout —Å—Ç–∞—Ç—É—Å: {blackout.status.value}")
        print(f"   Blackout —à–∞–ª—Ç–≥–∞–∞–Ω: {blackout.reason}")
        print(
            f"   Blackout —Ö—É–≥–∞—Ü–∞–∞: {blackout.start_time.strftime('%H:%M')} - {blackout.end_time.strftime('%H:%M')}"
        )
        assert blackout.status == BlackoutStatus.PRE_EVENT
    else:
        print("   NFP blackout –∞–ª–≥–∞ (—Ö“Ø–ª—ç—ç–≥–¥—ç–∂ –±—É–π)")

    print("   ‚úÖ Blackout window —Ç–æ–æ—Ü–æ–æ–ª–æ–ª –∑”©–≤")

    print("\n4. Trading permission —à–∞–ª–≥–∞–ª—Ç...")

    async def test_trading_permission():
        # USD currency-—Ç—ç–π –∞—Ä–∏–ª–∂–∞–∞ —à–∞–ª–≥–∞—Ö
        result = await guard.check_trading_allowed(["USD"])

        print(f"   USD –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {result.allowed}")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.status.value}")
        print(f"   –®–∞–ª—Ç–≥–∞–∞–Ω: {result.reason}")

        if result.next_clear_time:
            remaining_time = (result.next_clear_time - now).total_seconds() / 60
            print(f"   –î–∞—Ä–∞–∞–≥–∏–π–Ω –∞—Ä–∏–ª–∂–∞–∞ –±–æ–ª–æ–º–∂—Ç–æ–π: {remaining_time:.0f} –º–∏–Ω—É—Ç—ã–Ω –¥–∞—Ä–∞–∞")

        if result.active_blackouts:
            print(f"   –ò–¥—ç–≤—Ö—Ç—ç–π blackout —Ç–æ–æ: {len(result.active_blackouts)}")

        # NFP blackout –±–∞–π–≥–∞–∞ —Ç—É–ª –∞—Ä–∏–ª–∂–∞–∞ —Ö–æ—Ä–∏–≥–ª–æ–≥–¥–æ—Ö —ë—Å—Ç–æ–π
        assert not result.allowed, "NFP —ç–≤–µ–Ω—Ç–∏–π–Ω —É–ª–º–∞–∞—Å –∞—Ä–∏–ª–∂–∞–∞ —Ö–æ—Ä–∏–≥–ª–æ–≥–¥–æ—Ö —ë—Å—Ç–æ–π"
        assert result.status in [BlackoutStatus.PRE_EVENT, BlackoutStatus.ACTIVE_EVENT]

        return result

    # Async —Ç–µ—Å—Ç –∞–∂–∏–ª–ª—É—É–ª–∞—Ö
    trading_result = asyncio.run(test_trading_permission())
    print("   ‚úÖ Trading permission —à–∞–ª–≥–∞–ª—Ç –∑”©–≤")

    print("\n5. EUR –∞—Ä–∏–ª–∂–∞–∞–≥ —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    async def test_eur_trading():
        # EUR currency —à–∞–ª–≥–∞—Ö - GDP —ç–≤–µ–Ω—Ç–∏–π–Ω post-blackout
        result = await guard.check_trading_allowed(["EUR"])

        print(f"   EUR –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {result.allowed}")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.status.value}")

        # GDP —ç–≤–µ–Ω—Ç 5 –º–∏–Ω—É—Ç—ã–Ω ”©–º–Ω”© –±–æ–ª—Å–æ–Ω —Ç—É–ª post-event blackout –±–∞–π–≥–∞–∞ –±–∞–π—Ö
        if not result.allowed:
            assert result.status == BlackoutStatus.POST_EVENT
            print("   ‚úÖ EUR post-event blackout –∑”©–≤ –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞")
        else:
            print("   ‚ö†Ô∏è EUR blackout –¥—É—É—Å—Å–∞–Ω —ç—Å–≤—ç–ª —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω–¥ —Ç–æ—Ö–∏—Ä–æ—Ö–≥“Ø–π")

        return result

    eur_result = asyncio.run(test_eur_trading())

    print("\n6. Upcoming events —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    upcoming = guard.get_upcoming_events(24)  # 24 —Ü–∞–≥–∏–π–Ω —ç–≤–µ–Ω—Ç“Ø“Ø–¥
    print(f"   –î–∞—Ä–∞–∞–≥–∏–π–Ω 24 —Ü–∞–≥—Ç: {len(upcoming)} —ç–≤–µ–Ω—Ç")

    for i, event in enumerate(upcoming[:3], 1):  # –≠—Ö–Ω–∏–π 3-—ã–≥ —Ö–∞—Ä—É—É–ª–∞—Ö
        time_until = (event.datetime - now).total_seconds() / 3600
        print(
            f"   {i}. {event.title} ({event.importance.value}) - {time_until:.1f} —Ü–∞–≥–∏–π–Ω –¥–∞—Ä–∞–∞"
        )

    print("   ‚úÖ Upcoming events –∑”©–≤")

    print("\n7. Cache —Å–∏—Å—Ç–µ–º–∏–π–≥ —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    # Cache validity —à–∞–ª–≥–∞—Ö
    assert guard._is_cache_valid(), "Cache —Ö“Ø—á–∏–Ω—Ç—ç–π –±–∞–π—Ö —ë—Å—Ç–æ–π"

    # Cache status-–≥ –¥–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö
    status = guard.get_calendar_status()
    print(f"   –≠–≤–µ–Ω—Ç–∏–π–Ω —Ç–æ–æ: {status['events_count']}")
    print(f"   API –¥—É—É–¥–ª–∞–≥–∞: {status['api_calls']}")
    print(f"   Cache TTL: {status['cache_ttl']} —Å–µ–∫—É–Ω–¥")

    assert status["events_count"] == 3, "3 —ç–≤–µ–Ω—Ç –±–∞–π—Ö —ë—Å—Ç–æ–π"
    print("   ‚úÖ Cache —Å–∏—Å—Ç–µ–º –∑”©–≤ –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞")

    print("\n8. Empty currency list —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    async def test_no_currency_filter():
        # Currency filter-–≥“Ø–π–≥—ç—ç—Ä —à–∞–ª–≥–∞—Ö
        result = await guard.check_trading_allowed([])
        print(f"   –ë“Ø—Ö currency –∞—Ä–∏–ª–∂–∞–∞ –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω: {result.allowed}")

        # NFP —ç–≤–µ–Ω—Ç –±–∞–π–≥–∞–∞ —Ç—É–ª –∞—Ä–∏–ª–∂–∞–∞ —Ö–æ—Ä–∏–≥–ª–æ–≥–¥–æ—Ö —ë—Å—Ç–æ–π
        assert not result.allowed, "NFP —ç–≤–µ–Ω—Ç–∏–π–Ω —É–ª–º–∞–∞—Å –±“Ø—Ö –∞—Ä–∏–ª–∂–∞–∞ —Ö–æ—Ä–∏–≥–ª–æ–≥–¥–æ—Ö —ë—Å—Ç–æ–π"

        return result

    no_filter_result = asyncio.run(test_no_currency_filter())
    print("   ‚úÖ Currency filter —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    print("\n9. Test —Ñ–∞–π–ª—É—É–¥—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç–∂ –±–∞–π–Ω–∞...")
    if test_cache_path.exists():
        test_cache_path.unlink()
    print("   ‚úÖ –¶—ç–≤—ç—Ä–ª—ç–ª—Ç –¥—É—É—Å–ª–∞–∞")

    print("\nüéâ Calendar Guard –±“Ø—Ö —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –¥—É—É—Å–ª–∞–∞!")
    print("üìä –°–∏—Å—Ç–µ–º–∏–π–Ω “Ø–Ω—ç–ª–≥—ç—ç:")
    print("   ‚úÖ Economic Calendar API integration")
    print("   ‚úÖ TTL Cache —Å–∏—Å—Ç–µ–º—Ç—ç–π ”©–≥”©–≥–¥”©–ª —Ö–∞–¥–≥–∞–ª–∞–ª—Ç")
    print("   ‚úÖ Event importance-–¥ —Å—É—É—Ä–∏–ª—Å–∞–Ω blackout window")
    print("   ‚úÖ Currency-specific trading permission")
    print("   ‚úÖ Multiple blackout handling")
    print("   ‚úÖ Pre/Post/Active event status tracking")
    print("   ‚úÖ Retry/backoff –º–µ—Ö–∞–Ω–∏–∑–º—ã–Ω –¥—ç–º–∂–ª—ç–≥")


if __name__ == "__main__":
    test_calendar_guard()

#!/usr/bin/env python3
"""
Risk Governance Telegram Alerts
Upgrade #07 - –≠—Ä—Å–¥—ç–ª–∏–π–Ω –∑–∞—Å–∞–≥–ª–∞–ª—ã–Ω Telegram –∞–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞
"""

import asyncio
from datetime import UTC, datetime

try:
    from telegram import Bot
    from telegram.error import TelegramError

    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False

from config.settings import get_settings
from logging_setup import setup_advanced_logger

logger = setup_advanced_logger(__name__)


class RiskAlertManager:
    """–≠—Ä—Å–¥—ç–ª–∏–π–Ω –∑–∞—Å–∞–≥–ª–∞–ª—ã–Ω –∞–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞ –∏–ª–≥—ç—ç—Ö"""

    def __init__(self):
        self.settings = get_settings()
        self.bot: Bot | None = None
        self.chat_ids: list[str] = []

        if not TELEGRAM_AVAILABLE:
            logger.warning(
                "python-telegram-bot —Å—É—É–≥–∞–∞–≥“Ø–π –±–∞–π–Ω–∞ - Telegram alert –∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π"
            )
            return

        self._initialize_bot()

    def _initialize_bot(self):
        """Telegram bot —ç—Ö–ª“Ø“Ø–ª—ç—Ö"""
        if not self.settings.telegram.bot_token:
            logger.info("Telegram bot token –±–∞–π—Ö–≥“Ø–π - alert —Å–∏—Å—Ç–µ–º –∏–¥—ç–≤—Ö–≥“Ø–π")
            return

        try:
            self.bot = Bot(token=self.settings.telegram.bot_token)

            # Chat ID-—É—É–¥ —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
            if self.settings.telegram.chat_ids:
                self.chat_ids = [
                    chat_id.strip()
                    for chat_id in self.settings.telegram.chat_ids.split(",")
                    if chat_id.strip()
                ]
            elif self.settings.telegram.chat_id:
                self.chat_ids = [self.settings.telegram.chat_id]

            if self.chat_ids:
                logger.info(
                    "Risk alert Telegram bot –±—ç–ª—ç–Ω –±–æ–ª–ª–æ–æ",
                    extra={"chat_count": len(self.chat_ids)},
                )
            else:
                logger.warning("Chat ID –±–∞–π—Ö–≥“Ø–π - Telegram alert –∏–¥—ç–≤—Ö–≥“Ø–π")
                self.bot = None

        except Exception as e:
            logger.error(
                "Telegram bot —ç—Ö–ª“Ø“Ø–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", extra={"error": str(e)}
            )
            self.bot = None

    async def send_risk_alert(self, message: str, level: str = "INFO") -> bool:
        """–≠—Ä—Å–¥—ç–ª–∏–π–Ω –∞–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞ –∏–ª–≥—ç—ç—Ö"""
        if not self.bot or not self.chat_ids:
            logger.debug("Telegram bot —ç—Å–≤—ç–ª chat ID –±–∞–π—Ö–≥“Ø–π")
            return False

        # Emoji –Ω—ç–º—ç—Ö
        emoji_map = {
            "INFO": "‚ÑπÔ∏è",
            "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå",
            "CRITICAL": "üö®",
            "SUCCESS": "‚úÖ",
        }

        emoji = emoji_map.get(level, "‚ÑπÔ∏è")
        formatted_message = f"{emoji} **–≠–†–°–î–≠–õ–ò–ô–ù –ó–ê–°–ê–ì–õ–ê–õ**\n\n{message}\n\n‚è∞ {datetime.now(UTC).strftime('%Y-%m-%d %H:%M:%S UTC')}"

        success_count = 0

        for chat_id in self.chat_ids:
            try:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=formatted_message,
                    parse_mode="Markdown",
                    timeout=self.settings.telegram.timeout_seconds,
                )
                success_count += 1

            except TelegramError as e:
                logger.error(
                    "Telegram –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞",
                    extra={"chat_id": chat_id, "error": str(e)},
                )
            except Exception as e:
                logger.error(
                    "–°–∞–Ω–∞–∞–Ω–¥–≥“Ø–π –∞–ª–¥–∞–∞ Telegram –∏–ª–≥—ç—ç—Ö—ç–¥",
                    extra={"chat_id": chat_id, "error": str(e)},
                )

        if success_count > 0:
            logger.info(
                "Risk alert –∞–º–∂–∏–ª—Ç—Ç–∞–π –∏–ª–≥—ç—ç–ª—ç—ç",
                extra={
                    "success_count": success_count,
                    "total_chats": len(self.chat_ids),
                    "level": level,
                },
            )
            return True
        else:
            logger.error("Risk alert –∏–ª–≥—ç—ç—Ö –±“Ø—Ä—ç–Ω –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª–ª–æ–æ")
            return False

    def send_risk_alert_sync(self, message: str, level: str = "INFO") -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω –≥–æ—Ä–∏–º–¥ —ç—Ä—Å–¥—ç–ª–∏–π–Ω –∞–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞ –∏–ª–≥—ç—ç—Ö"""
        if not self.bot:
            return False

        try:
            # –®–∏–Ω—ç event loop “Ø“Ø—Å–≥—ç—Ö —ç—Å–≤—ç–ª –±–∞–π–≥–∞–∞–≥ –∞—à–∏–≥–ª–∞—Ö
            try:
                loop = asyncio.get_event_loop()
                if loop.is_running():
                    # Event loop –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≤–∞–ª task “Ø“Ø—Å–≥—ç—Ö
                    asyncio.create_task(self.send_risk_alert(message, level))
                    return True
                else:
                    return loop.run_until_complete(self.send_risk_alert(message, level))
            except RuntimeError:
                # Event loop –±–∞–π—Ö–≥“Ø–π –±–æ–ª —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö
                return asyncio.run(self.send_risk_alert(message, level))

        except Exception as e:
            logger.error(
                "–°–∏–Ω—Ö—Ä–æ–Ω Telegram alert –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", extra={"error": str(e)}
            )
            return False

    def format_risk_metrics_alert(self, metrics: dict, alert_type: str) -> str:
        """–≠—Ä—Å–¥—ç–ª–∏–π–Ω —Ö—ç–º–∂“Ø“Ø—Ä–∏–π–Ω –∞–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞ –±—ç–ª—Ç–≥—ç—Ö"""
        messages = {
            "daily_limit_warning": "üìä **”®–î–†–ò–ô–ù –•–Ø–ó–ì–ê–ê–† –ê–ù–•–ê–ê–†–£–£–õ–ì–ê**",
            "weekly_limit_warning": "üìà **7 –•–û–ù–û–ì–ò–ô–ù –•–Ø–ó–ì–ê–ê–† –ê–ù–•–ê–ê–†–£–£–õ–ì–ê**",
            "circuit_breaker_triggered": "üö® **CIRCUIT BREAKER –ò–î–≠–í–•–ñ–õ–≠–≠**",
            "high_risk_alert": "‚ö†Ô∏è **”®–ù–î”®–† –≠–†–°–î–≠–õ–ò–ô–ù –ê–ù–•–ê–ê–†–£–£–õ–ì–ê**",
            "consecutive_loss_alert": "üìâ **–î–ê–†–ê–ê–õ–°–ê–ù –ê–õ–î–ê–ì–î–õ–´–ù –ê–ù–•–ê–ê–†–£–£–õ–ì–ê**",
        }

        header = messages.get(alert_type, "üìã **–≠–†–°–î–≠–õ–ò–ô–ù –ú–≠–î–≠–≠–õ–≠–õ**")

        message_parts = [header]

        # ”®–¥—Ä–∏–π–Ω —Ö—ç–º–∂“Ø“Ø—Ä
        if "daily_loss" in metrics:
            message_parts.append("üìÖ **”®–¥—Ä–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª:**")
            message_parts.append(f"   ‚Ä¢ –ê–ª–¥–∞–≥–¥–∞–ª: {metrics['daily_loss']:.2f}%")
            message_parts.append(f"   ‚Ä¢ –ê—Ä–∏–ª–∂–∞–∞: {metrics.get('daily_trades', 0)} —É–¥–∞–∞")

        # 7 —Ö–æ–Ω–æ–≥–∏–π–Ω —Ö—ç–º–∂“Ø“Ø—Ä
        if "weekly_loss" in metrics:
            message_parts.append("üìä **7 —Ö–æ–Ω–æ–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª:**")
            message_parts.append(f"   ‚Ä¢ –ê–ª–¥–∞–≥–¥–∞–ª: {metrics['weekly_loss']:.2f}%")
            message_parts.append(
                f"   ‚Ä¢ –ê—Ä–∏–ª–∂–∞–∞: {metrics.get('weekly_trades', 0)} —É–¥–∞–∞"
            )

        # –ù—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª
        if "consecutive_losses" in metrics:
            message_parts.append(
                f"üîÑ **–î–∞—Ä–∞–∞–ª—Å–∞–Ω –∞–ª–¥–∞–≥–¥–∞–ª:** {metrics['consecutive_losses']} —É–¥–∞–∞"
            )

        if "risk_level" in metrics:
            message_parts.append(
                f"üìà **–≠—Ä—Å–¥—ç–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω:** {metrics['risk_level'].upper()}"
            )

        if "next_trade_allowed" in metrics:
            message_parts.append(
                f"‚è≥ **–î–∞—Ä–∞–∞–≥–∏–π–Ω –∞—Ä–∏–ª–∂–∞–∞:** {metrics['next_trade_allowed']}"
            )

        return "\n".join(message_parts)


# –ì–ª–æ–±–∞–ª —Ö—É–≤—å—Å–∞–≥—á instance
_risk_alert_manager: RiskAlertManager | None = None


def get_risk_alert_manager() -> RiskAlertManager:
    """Risk alert manager-—ã–Ω instance –∞–≤–∞—Ö"""
    global _risk_alert_manager
    if _risk_alert_manager is None:
        _risk_alert_manager = RiskAlertManager()
    return _risk_alert_manager


def send_risk_alert(message: str, level: str = "INFO") -> bool:
    """–•—è–ª–±–∞—Ä —Ñ—É–Ω–∫—Ü risk alert –∏–ª–≥—ç—ç—Ö—ç–¥"""
    manager = get_risk_alert_manager()
    return manager.send_risk_alert_sync(message, level)

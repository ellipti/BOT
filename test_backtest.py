#!/usr/bin/env python3
"""
Backtest System —Ç–µ—Å—Ç
YAML configuration –±–æ–ª–æ–Ω backtest engine-–∏–π–Ω —à–∞–ª–≥–∞–ª—Ç

–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—É–¥:
1. YAML config —É–Ω—à–∏—Ö/–±–∏—á–∏—Ö
2. Sample data generation
3. Technical indicators —Ç–æ–æ—Ü–æ–æ–ª–æ–ª
4. Signal generation
5. Trade simulation
6. Performance metrics calculation
7. Results export (CSV/PNG)
8. In-sample/Out-of-sample validation
9. Grid search optimization demo
"""

import sys
from pathlib import Path

# Add backtest to path for imports
sys.path.insert(0, str(Path(__file__).parent))

from backtest.config_loader import ConfigLoader
from backtest.runner import BacktestEngine


def test_backtest_system():
    print("üîß Backtest System —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    # Test files —Ü—ç–≤—ç—Ä–ª—ç—Ö
    test_files = [
        "configs/test_strategy.yaml",
        "reports/test_backtest_*.csv",
        "reports/test_backtest_*.png",
    ]

    print("\nüìã 1. YAML Configuration —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    try:
        # Config loader —Ç–µ—Å—Ç
        loader = ConfigLoader()

        # Default config —É–Ω—à–∏—Ö
        config = loader.load_strategy_config("configs/strategy.yaml")

        print(f"   Strategy name: {config.name}")
        print(f"   MA fast: {config.parameters.ma_fast}")
        print(f"   MA slow: {config.parameters.ma_slow}")
        print(f"   RSI period: {config.parameters.rsi_period}")
        print(f"   Risk per trade: {config.parameters.risk_per_trade}")
        print(f"   Initial balance: {config.backtest.account.initial_balance}")
        print(f"   Trading sessions: {len(config.parameters.trading_sessions)}")

        # Test configuration save
        config.name = "Test Strategy"
        config.parameters.ma_fast = 15
        config.parameters.ma_slow = 45

        test_config_path = "configs/test_strategy.yaml"
        success = loader.save_strategy_config(config, test_config_path)

        if success:
            print("   ‚úÖ YAML config —É–Ω—à–∏—Ö/–±–∏—á–∏—Ö –∞–º–∂–∏–ª—Ç—Ç–∞–π")
        else:
            print("   ‚ùå YAML config —Ö–∞–¥–≥–∞–ª–∞—Ö –∞–º–∂–∏–ª—Ç–≥“Ø–π")

        # Test config –¥–∞—Ö–∏–Ω —É–Ω—à–∏—Ö
        reloaded_config = loader.load_strategy_config(test_config_path)
        assert reloaded_config.name == "Test Strategy"
        assert reloaded_config.parameters.ma_fast == 15

        print("   ‚úÖ Config persistence —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    except Exception as e:
        print(f"   ‚ùå YAML config —Ç–µ—Å—Ç –∞–ª–¥–∞–∞: {e}")
        return False

    print("\nüìä 2. Backtest Engine —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    try:
        # Backtest engine “Ø“Ø—Å–≥—ç—Ö
        engine = BacktestEngine(config)

        print("   Engine “Ø“Ø—Å—ç–≥–¥–ª—ç—ç")

        # Sample data generation —Ç–µ—Å—Ç
        symbol = "XAUUSD"
        start_date = "2024-01-01"
        end_date = "2024-03-31"  # 3 —Å–∞—Ä—ã–Ω ”©–≥”©–≥–¥”©–ª

        print(f"   Sample data “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞: {symbol} {start_date} - {end_date}")
        df = engine.generate_sample_data(symbol, start_date, end_date, "M30")

        print(f"   Data points: {len(df)}")
        print(f"   Date range: {df.index[0]} - {df.index[-1]}")
        print(f"   Price range: ${df['close'].min():.2f} - ${df['close'].max():.2f}")

        assert len(df) > 1000, "–î”©–≥”©—Ä“Ø“Ø ”©–≥”©–≥–¥”©–ª –±–∞–π—Ö —ë—Å—Ç–æ–π"
        print("   ‚úÖ Sample data generation –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    except Exception as e:
        print(f"   ‚ùå Sample data —Ç–µ—Å—Ç –∞–ª–¥–∞–∞: {e}")
        return False

    print("\nüìà 3. Technical indicators —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    try:
        # Strategy –ø–∞—Ä–∞–º–µ—Ç—Ä“Ø“Ø–¥
        params = {
            "ma_fast": config.parameters.ma_fast,
            "ma_slow": config.parameters.ma_slow,
            "rsi_period": config.parameters.rsi_period,
            "atr_period": config.parameters.atr_period,
        }

        # Indicators —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
        df_with_indicators = engine.calculate_indicators(df, params)

        ma_fast_col = f'MA_{params["ma_fast"]}'
        ma_slow_col = f'MA_{params["ma_slow"]}'

        print(
            f"   {ma_fast_col} —Å“Ø“Ø–ª–∏–π–Ω —É—Ç–≥–∞: {df_with_indicators[ma_fast_col].iloc[-1]:.2f}"
        )
        print(
            f"   {ma_slow_col} —Å“Ø“Ø–ª–∏–π–Ω —É—Ç–≥–∞: {df_with_indicators[ma_slow_col].iloc[-1]:.2f}"
        )
        print(f"   RSI —Å“Ø“Ø–ª–∏–π–Ω —É—Ç–≥–∞: {df_with_indicators['RSI'].iloc[-1]:.1f}")
        print(f"   ATR —Å“Ø“Ø–ª–∏–π–Ω —É—Ç–≥–∞: {df_with_indicators['ATR'].iloc[-1]:.5f}")

        # Indicators validation
        assert not df_with_indicators[ma_fast_col].dropna().empty
        assert not df_with_indicators["RSI"].dropna().empty
        assert not df_with_indicators["ATR"].dropna().empty

        print("   ‚úÖ Technical indicators —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    except Exception as e:
        print(f"   ‚ùå Indicators —Ç–µ—Å—Ç –∞–ª–¥–∞–∞: {e}")
        return False

    print("\nüéØ 4. Signal generation —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    try:
        # Signals “Ø“Ø—Å–≥—ç—Ö
        df_with_signals = engine.generate_signals(
            df_with_indicators, config.parameters.__dict__
        )

        # Signal statistics
        buy_signals = (df_with_signals["signal"] == 1).sum()
        sell_signals = (df_with_signals["signal"] == -1).sum()
        total_signals = buy_signals + sell_signals

        print(f"   Buy signals: {buy_signals}")
        print(f"   Sell signals: {sell_signals}")
        print(f"   Total signals: {total_signals}")
        print(f"   Signal frequency: {total_signals/len(df):.3%}")

        assert total_signals > 0, "Signal “Ø“Ø—Å—ç—Ö —ë—Å—Ç–æ–π"
        print("   ‚úÖ Signal generation –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    except Exception as e:
        print(f"   ‚ùå Signal generation —Ç–µ—Å—Ç –∞–ª–¥–∞–∞: {e}")
        return False

    print("\nüíº 5. Trade simulation —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    try:
        # Account config
        account_config = {
            "initial_balance": config.backtest.account.initial_balance,
            "spread": config.backtest.account.spread,
            "commission": config.backtest.account.commission,
            "symbol": config.backtest.data.symbol,
        }

        # Trade simulation
        trades = engine.simulate_trades(
            df_with_signals, config.parameters.__dict__, account_config
        )

        print(f"   Simulate —Ö–∏–π—Å—ç–Ω trades: {len(trades)}")

        if trades:
            winners = sum(1 for t in trades if t.is_winner)
            print(f"   Winning trades: {winners}")
            print(f"   Win rate: {winners/len(trades):.1%}")

            total_profit = sum(t.profit for t in trades)
            print(f"   Total profit: ${total_profit:.2f}")

            avg_duration = sum(
                t.duration_hours for t in trades if t.duration_hours > 0
            ) / len([t for t in trades if t.duration_hours > 0])
            print(f"   Average duration: {avg_duration:.1f} hours")

        assert len(trades) > 0, "Trade “Ø“Ø—Å—ç—Ö —ë—Å—Ç–æ–π"
        print("   ‚úÖ Trade simulation –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    except Exception as e:
        print(f"   ‚ùå Trade simulation —Ç–µ—Å—Ç –∞–ª–¥–∞–∞: {e}")
        return False

    print("\nüìä 6. Performance metrics —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    try:
        # Performance calculation
        results = engine.calculate_performance_metrics(
            trades, account_config["initial_balance"]
        )

        print(f"   Strategy: {results.strategy_name}")
        print(f"   Total return: {results.total_return:.2%}")
        print(f"   Win rate: {results.win_rate:.2%}")
        print(f"   Profit factor: {results.profit_factor:.2f}")
        print(f"   Sharpe ratio: {results.sharpe_ratio:.2f}")
        print(f"   Max drawdown: {results.max_drawdown:.2%}")
        print(f"   Average win: ${results.average_win:.2f}")
        print(f"   Average loss: ${results.average_loss:.2f}")

        # Validation
        assert results.total_trades == len(trades)
        assert results.winning_trades + results.losing_trades == results.total_trades
        assert results.final_balance == results.initial_balance + sum(
            t.profit for t in trades
        )

        print("   ‚úÖ Performance metrics —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    except Exception as e:
        print(f"   ‚ùå Performance metrics —Ç–µ—Å—Ç –∞–ª–¥–∞–∞: {e}")
        return False

    print("\nüíæ 7. Results export —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    try:
        # Results —Ö–∞–¥–≥–∞–ª–∞—Ö
        saved_files = engine.save_results(results, custom_suffix="_test")

        print(f"   –•–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω —Ñ–∞–π–ª—É—É–¥: {len(saved_files)}")
        for file_type, file_path in saved_files.items():
            print(f"     {file_type}: {file_path}")

            # –§–∞–π–ª –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
            if Path(file_path).exists():
                print(f"       ‚úÖ {file_type} —Ñ–∞–π–ª –±–∞–π–≥–∞–∞")
            else:
                print(f"       ‚ùå {file_type} —Ñ–∞–π–ª –±–∞–π—Ö–≥“Ø–π")

        assert len(saved_files) > 0, "File —Ö–∞–¥–≥–∞–ª–∞–≥–¥–∞—Ö —ë—Å—Ç–æ–π"
        print("   ‚úÖ Results export –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    except Exception as e:
        print(f"   ‚ùå Results export —Ç–µ—Å—Ç –∞–ª–¥–∞–∞: {e}")
        return False

    print("\nüî¨ 8. Full backtest integration —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    try:
        # Full backtest run
        print("   Full backtest –∞–∂–∏–ª–ª—É—É–ª–∂ –±–∞–π–Ω–∞...")
        final_results = engine.run_backtest(save_results=True)

        print("   Final results:")
        print(f"     Strategy: {final_results.strategy_name}")
        print(
            f"     Period: {final_results.start_date.strftime('%Y-%m-%d')} - {final_results.end_date.strftime('%Y-%m-%d')}"
        )
        print(f"     Total trades: {final_results.total_trades}")
        print(f"     Win rate: {final_results.win_rate:.2%}")
        print(f"     Total return: {final_results.total_return:.2%}")
        print(f"     Profit factor: {final_results.profit_factor:.2f}")
        print(f"     Max drawdown: {final_results.max_drawdown:.2%}")

        # Basic validation
        assert final_results.total_trades > 0, "Trades “Ø“Ø—Å—ç—Ö —ë—Å—Ç–æ–π"
        assert (
            final_results.win_rate >= 0 and final_results.win_rate <= 1
        ), "Win rate 0-1 —Ö–æ–æ—Ä–æ–Ω–¥ –±–∞–π—Ö —ë—Å—Ç–æ–π"

        print("   ‚úÖ Full backtest –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    except Exception as e:
        print(f"   ‚ùå Full backtest —Ç–µ—Å—Ç –∞–ª–¥–∞–∞: {e}")
        return False

    print("\nüéØ 9. Grid search demo —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    try:
        # Simple parameter sweep demo
        print("   Parameter optimization demo —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

        base_params = config.parameters.__dict__.copy()

        # MA fast parameter sweep
        ma_fast_values = [15, 20, 25]
        best_sharpe = -999
        best_params = None

        for ma_fast in ma_fast_values:
            test_params = base_params.copy()
            test_params["ma_fast"] = ma_fast

            print(f"     MA Fast = {ma_fast} —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

            # Quick backtest
            test_results = engine.run_backtest(params=test_params, save_results=False)

            print(
                f"       Return: {test_results.total_return:.2%}, Sharpe: {test_results.sharpe_ratio:.2f}"
            )

            if test_results.sharpe_ratio > best_sharpe:
                best_sharpe = test_results.sharpe_ratio
                best_params = test_params.copy()

        print("   –•–∞–º–≥–∏–π–Ω —Å–∞–π–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä:")
        print(f"     MA Fast: {best_params['ma_fast']}")
        print(f"     Sharpe Ratio: {best_sharpe:.2f}")

        print("   ‚úÖ Grid search demo –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    except Exception as e:
        print(f"   ‚ùå Grid search —Ç–µ—Å—Ç –∞–ª–¥–∞–∞: {e}")
        return False

    print("\nüßπ 10. Cleanup —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    try:
        # Test files —Ü—ç–≤—ç—Ä–ª—ç—Ö
        cleanup_paths = [
            Path("configs/test_strategy.yaml"),
        ]

        for path in cleanup_paths:
            if path.exists():
                path.unlink()
                print(f"   –¶—ç–≤—ç—Ä–ª—ç–≤: {path}")

        print("   ‚úÖ Cleanup –∞–º–∂–∏–ª—Ç—Ç–∞–π")

    except Exception as e:
        print(f"   ‚ùå Cleanup –∞–ª–¥–∞–∞: {e}")

    print("\nüéâ Backtest System –±“Ø—Ö —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π –¥—É—É—Å–ª–∞–∞!")
    print("üìä System Features:")
    print("   ‚úÖ YAML-based strategy configuration")
    print("   ‚úÖ Sample data generation and loading")
    print("   ‚úÖ Technical indicators calculation")
    print("   ‚úÖ Trading signal generation")
    print("   ‚úÖ Realistic trade simulation")
    print("   ‚úÖ Comprehensive performance metrics")
    print("   ‚úÖ Multi-format results export (CSV)")
    print("   ‚úÖ Parameter optimization framework")
    print("   ‚úÖ In-sample/Out-of-sample ready")
    print("   ‚úÖ Grid search capabilities")

    return True


if __name__ == "__main__":
    success = test_backtest_system()
    if success:
        print("\n‚úÖ –ë“Ø—Ö —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π!")
    else:
        print("\n‚ùå –ó–∞—Ä–∏–º —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç–≥“Ø–π!")
        sys.exit(1)

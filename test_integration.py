#!/usr/bin/env python3
"""Test state management integration with atomic operations"""

import time
from datetime import UTC
from pathlib import Path

import core.state as state_module
from safety_gate import LimitsManager


def test_state_functions():
    """Test state functions with atomic operations"""
    print("–ê—Ç–æ–º “Ø–π–ª–¥–ª“Ø“Ø–¥—Ç—ç–π —Ç”©–ª”©–≤–∏–π–Ω —Ñ—É–Ω–∫—Ü—É—É–¥—ã–≥ —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    # Clean up any existing state files
    state_dir = Path("state")
    state_file = state_dir / "last_state.json"
    if state_file.exists():
        state_file.unlink()

    print("1. –°–∞—è—Ö–∞–Ω –∞—Ä–∏–ª–∂–∞–∞ —Ö–∏–π—Å—ç–Ω —ç—Å—ç—Ö —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
    # Should return False for new symbol
    result = state_module.recently_traded("XAUUSD", tf_minutes=30)
    print(f"   –°–∞—è—Ö–∞–Ω –∞—Ä–∏–ª–∂–∞–∞ —Ö–∏–π—Å—ç–Ω (—à–∏–Ω—ç): {result}")
    assert result is False
    print("   ‚úÖ –®–∏–Ω—ç —Ç—ç–º–¥—ç–≥—Ç —Å–∞—è—Ö–∞–Ω –∞—Ä–∏–ª–∂–∞–∞ —Ö–∏–π–≥—ç—ç–≥“Ø–π")

    print("2. –ê—Ä–∏–ª–∂–∞–∞ —Ç—ç–º–¥—ç–≥–ª—ç–∂ –±–∞–π–Ω–∞...")
    state_module.mark_trade("XAUUSD", "BUY")
    print("   ‚úÖ –ê—Ä–∏–ª–∂–∞–∞ —Ç—ç–º–¥—ç–≥–ª—ç–≥–¥–ª—ç—ç")

    print("3. –¢—ç–º–¥—ç–≥–ª—ç—Å–Ω–∏–π –¥–∞—Ä–∞–∞ —Å–∞—è—Ö–∞–Ω –∞—Ä–∏–ª–∂–∞–∞ —Ö–∏–π—Å—ç–Ω —ç—Å—ç—Ö —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
    result = state_module.recently_traded("XAUUSD", tf_minutes=30, cooldown_mult=1.5)
    print(f"   –°–∞—è—Ö–∞–Ω –∞—Ä–∏–ª–∂–∞–∞ —Ö–∏–π—Å—ç–Ω (—Ç—ç–º–¥—ç–≥–ª—ç—Å–Ω–∏–π –¥–∞—Ä–∞–∞): {result}")
    assert result is True  # Should be in cooldown
    print("   ‚úÖ –°–∞—è—Ö–∞–Ω –∞—Ä–∏–ª–∂–∞–∞ —Ö–∏–π—Å—ç–Ω –±–∞–π–¥–∞–ª –∑”©–≤ –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞")

    print("4. –¢”©–ª”©–≤–∏–π–Ω ”©–≥”©–≥–¥–ª–∏–π–Ω –±“Ø—Ç—Ü–∏–π–≥ —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")
    state_data = state_module._read()
    print(f"   –¢”©–ª”©–≤–∏–π–Ω ”©–≥”©–≥–¥”©–ª: {state_data}")
    assert "XAUUSD" in state_data
    assert "last_trade_ts" in state_data["XAUUSD"]
    print("   ‚úÖ –¢”©–ª”©–≤–∏–π–Ω –±“Ø—Ç—ç—Ü –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞")

    # Cleanup
    if state_file.exists():
        state_file.unlink()

    print("   ‚úÖ –¢”©–ª”©–≤–∏–π–Ω —Ñ—É–Ω–∫—Ü—ã–Ω —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π!")


def test_limits_manager():
    """Test LimitsManager with atomic operations"""
    print("\n–ê—Ç–æ–º “Ø–π–ª–¥–ª“Ø“Ø–¥—Ç—ç–π LimitsManager-–≥ —Ç–µ—Å—Ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...")

    # Clean up any existing limits file
    limits_file = Path("limits.json")
    if limits_file.exists():
        limits_file.unlink()

    limits_mgr = LimitsManager()

    print("1. “Æ–Ω–¥—Å—ç–Ω —É—Ç–≥—ã–≥ —Ç–æ—Ö–∏—Ä—É—É–ª–∂ –±–∞–π–Ω–∞...")
    from datetime import datetime

    now_utc = datetime.now(UTC)
    limits_mgr.ensure_baseline("XAUUSD", now_utc, 1000.0)
    print("   ‚úÖ “Æ–Ω–¥—Å—ç–Ω —É—Ç–≥–∞ —Ç–æ—Ö–∏—Ä—É—É–ª–∞–≥–¥–ª–∞–∞")

    print("2. –¢”©–ª”©–≤ —Ç–æ—Ö–∏—Ä—É—É–ª–∂ –±–∞–π–Ω–∞...")
    test_state = {"last_execution": time.time(), "test_field": "test_value"}
    limits_mgr.set_state("XAUUSD", now_utc, test_state)
    print("   ‚úÖ –¢”©–ª”©–≤ —Ç–æ—Ö–∏—Ä—É—É–ª–∞–≥–¥–ª–∞–∞")

    print("3. –ê—Ä–∏–ª–∂–∞–∞–≥ —Ç—ç–º–¥—ç–≥–ª—ç–∂ –±–∞–π–Ω–∞...")
    limits_mgr.mark_trade("XAUUSD", now_utc)
    print("   ‚úÖ –ê—Ä–∏–ª–∂–∞–∞ —Ç—ç–º–¥—ç–≥–ª—ç–≥–¥–ª—ç—ç")

    print("4. –¢”©–ª”©–≤–∏–π–≥ —É–Ω—à–∏—Ö...")
    state = limits_mgr._load()
    print(f"   –û–¥–æ–æ–≥–∏–π–Ω —Ç”©–ª”©–≤: {state}")
    # Check that we have some data structure with date-based keys
    assert len(state) > 0, "–¢”©–ª”©–≤ –∑–∞—Ä–∏–º –Ω—ç–≥—ç–Ω ”©–≥”©–≥–¥”©–ª –∞–≥—É—É–ª—Å–∞–Ω –±–∞–π—Ö —ë—Å—Ç–æ–π"
    print("   ‚úÖ –¢”©–ª”©–≤–∏–π–Ω –±“Ø—Ç—ç—Ü –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞")

    # Cleanup
    if limits_file.exists():
        limits_file.unlink()

    print("   ‚úÖ LimitsManager —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π!")


if __name__ == "__main__":
    test_state_functions()
    test_limits_manager()
    print("\nüéâ –ë“Ø—Ö –Ω—ç–≥—Ç–≥—ç—Å—ç–Ω —Ç–µ—Å—Ç“Ø“Ø–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π!")

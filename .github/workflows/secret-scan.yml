name: 🔐 Security - Secret Scan

on:
  push:
    branches: [main, develop, "feature/*", "hotfix/*"]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly scan on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

jobs:
  secret-scan:
    name: 🕵️ Gitleaks Secret Detection
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for comprehensive scanning
          fetch-depth: 0

      - name: 🔍 Run Gitleaks Secret Scanner
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: detect --source . --redact --verbose --report-format sarif --report-path gitleaks-report.sarif

      - name: 📊 Upload SARIF Results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-report.sarif
          category: gitleaks

      - name: 📋 Upload Gitleaks Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report-${{ github.sha }}
          path: gitleaks-report.sarif
          retention-days: 30

  additional-security-checks:
    name: 🛡️ Additional Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install Security Tools
        run: |
          pip install bandit safety semgrep

      - name: 🔒 Run Bandit Security Linter
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: 📋 Upload Bandit Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report-${{ github.sha }}
          path: bandit-report.json
          retention-days: 30

      - name: 🛡️ Check Dependencies for Vulnerabilities
        run: |
          # Check requirements files for known vulnerabilities
          if [ -f "requirements.txt" ]; then
            safety check --file requirements.txt --json --output safety-report.json || true
          fi
          if [ -f "requirements-dev.txt" ]; then
            safety check --file requirements-dev.txt --json --output safety-dev-report.json || true
          fi

      - name: 📋 Upload Safety Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-reports-${{ github.sha }}
          path: safety-*.json
          retention-days: 30

  env-file-check:
    name: 🔍 Environment File Security Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚫 Ensure .env Files Are Not Committed
        run: |
          echo "🔍 Checking for .env files in repository..."

          # Check for .env files in git history
          if git log --all --full-history -- "*.env" | grep -q "commit"; then
            echo "❌ ERROR: .env files found in git history!"
            echo "This is a security risk. Remove them using:"
            echo "  git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch *.env' --prune-empty --tag-name-filter cat -- --all"
            exit 1
          fi

          # Check for .env files in current commit
          if find . -name "*.env" -not -path "./.git/*" | grep -q ".env"; then
            echo "❌ ERROR: .env files found in repository!"
            echo "Found files:"
            find . -name "*.env" -not -path "./.git/*"
            echo ""
            echo "Add to .gitignore and remove from tracking:"
            echo "  echo '*.env' >> .gitignore"
            echo "  git rm --cached *.env"
            exit 1
          fi

          echo "✅ No .env files found in repository"

      - name: 🔍 Check for Hardcoded Secrets Patterns
        run: |
          echo "🔍 Scanning for hardcoded secret patterns..."

          # Define patterns to search for
          PATTERNS=(
            "password\s*=\s*['\"][^'\"]{8,}['\"]"
            "api_key\s*=\s*['\"][^'\"]{20,}['\"]"
            "secret\s*=\s*['\"][^'\"]{16,}['\"]"
            "token\s*=\s*['\"][^'\"]{20,}['\"]"
            "BEGIN\s+(RSA\s+)?PRIVATE\s+KEY"
            "[0-9]+-[A-Za-z0-9]{35,}"
          )

          FOUND_ISSUES=0

          for pattern in "${PATTERNS[@]}"; do
            if grep -r -i -E "$pattern" . --include="*.py" --include="*.js" --include="*.ts" --include="*.json" --exclude-dir=".git" --exclude-dir="node_modules" --exclude-dir="__pycache__"; then
              echo "❌ Found potential hardcoded secret matching pattern: $pattern"
              FOUND_ISSUES=1
            fi
          done

          if [ $FOUND_ISSUES -eq 1 ]; then
            echo ""
            echo "❌ SECURITY ISSUE: Potential hardcoded secrets found!"
            echo "Please review the above findings and:"
            echo "1. Move secrets to environment variables or keyring"
            echo "2. Use the secrets management system (infra/secrets.py)"
            echo "3. Update .gitignore if needed"
            exit 1
          fi

          echo "✅ No obvious hardcoded secrets patterns found"

  security-summary:
    name: 📋 Security Scan Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, additional-security-checks, env-file-check]
    if: always()

    steps:
      - name: 📊 Security Scan Results
        run: |
          echo "## 🔐 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🕵️ Gitleaks Secret Detection" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "✅ **PASSED** - No secrets detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **FAILED** - Potential secrets found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Additional Security Checks" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.additional-security-checks.result }}" == "success" ]; then
            echo "✅ **PASSED** - Security linting completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **COMPLETED** - Check artifacts for details" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Environment File Check" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.env-file-check.result }}" == "success" ]; then
            echo "✅ **PASSED** - No .env files or hardcoded secrets" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **FAILED** - Environment file security issues found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review any security alerts in the GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Download and review security scan artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Use the keyring system for secret management (scripts/secret_set.py)" >> $GITHUB_STEP_SUMMARY
